# This is the configuration file for SET_MMU.PRG, and must be located in either
# the root directory of the boot drive or in the autofolder.

# This is the file I use when I want to split the Hades RAM into ST and TT
# RAM. Copy this file to the root of you boot partition and rename to MMUSETUP.CNF
# to use it.

# Split RAM into ST and TT RAM
split_ram=yes

# "pagesize" can be either 4k for 4k pages or 8k for ..eh.. 8k pages.
pagesize=8k

# With the "cacr" variable you set the cacr cpu register.
# The following are the following flags you can use...
#
# edc  - Enable Data Cache
# nad  - No Allocate Mode (data cache)
# esb  - Enable Store Buffer
# dpi  - Disable CPUSH Invalidation
# foc  - 1/2 cache operation mode enable (data cache)
# ebc  - Enable Branch Cache
# cabc - Clear all entries in the branch cache
# cubc - Clear all user entries in the branch cache
# eic  - Enable Instruction cache
# nai  - No Allocation Mode (instruction cache)
# fic  - 1/2 cache operation mode enable (instruction cache)
cacr=edc,esb,ebc,cabc,eic

# itt0, dtt0, itt1 and dtt1 sets the cpu registers with the same name to the
# value give here. These are the "Transparent Translation Registers".
# Since we are covering everything in the tree, we turn Trasparent Translation off.
# This also fixes (I hope) the problems that Mach64 users have had.
itt0=$0
dtt0=$0
itt1=$0
dtt1=$0

# To define a block of logical addressing area, used to build the translation
# tree, the following variables are used for each block you wich to define.
# logical  - The logical start address of the block to define
# physical - The physical start address of the block. The logical and physical
#            addresses are set equal in most cases. The CPU always uses logical
#            addresses to access memory, and then uses to tranlation tree to
#            obtain the actual physical address of that memory.
# size     - The size of the block.
# pd_flags - This is used to set initial flags in the page descriptors, as the
#            tree is built. For example  the caching mode is set using this flag.
# These are the following flags you can use with pd_flags. It is highly
# recommended you only use this to set the cache-mode, unless you know what you
# do!
#
# - The following flags are understood, but not used! pdt_r1 is always forced
# - into the pdt field of page descriptors. Also, SET_MMU can not create
# - indirect page descriptors at this time!
#
# pdt_iv    - Page Descriptor Type = invalid  ( %00 )
# pdt_r1    - ------- "" --------  = Resident ( %01 ) This is the pdt value set
#                                                     by SET_MMU.
# pdt_r2    - ------- "" --------  = Resident ( %11 )
# pdt_id    - ------- "" --------  = Indirect ( %10 ) 
#
# - The following flags can all be set at will, but dont do that unless you know
# - why you do it ;-)
#
# wp            - Write Protect, the Page is write protected
# used          - Used.
# modified      - Modified.
# super         - Page is supervisor accessible only.
# upa_0 - upa_3 - Sets the user page attribute field to 0,1,2 or 3
# global        - Global.
# ur1/ur2       - Sets the User reserved bit 11 (ur1) and 12 (ur2).
#
# The we have the caching modes..
#
# c_wt   - Cachable, Writetrought. Sets Writetrought caching.
# c_cb   - Cachable, CopyBack. Sets Copyback caching.
# c_p    - Cache inhibit, Precise exception model.
# c_ip   - Cache inhibit, ImPrecise exception model.
#
# All logical address spaces not defined by these blocks are marked INVALID in
# the translation tree.
#
# IMPORTANT: There *MUST* be an empty line between translation definition blocks!!
#
# Since we split the available RAM into ST/TT RAM, we need to first set up the
# block defining the ST RAM.
logical=$0
physical=$0
size=14*1024*1024
pd_flags=c_wt

# Then we set up the block that define the TT RAM. I have got a total of 40Mb in
# my Hades, and when 16Mb are gone ( 14Mb = ST ram, 2Mb lost ) we subtract that
# from the total amout of RAM available. I use 40-16=24Mb ( I WANT MORE RAM!! )
# This is the only thing you need to change in this file.
logical=$01000000
physical=$01000000
size=24*1024*1024
pd_flags=c_wt

# Then we remap the cartrige area up into ISA memory area, where it is actually
# found when you have a ROM card. TOS crash without this (access errors), since this
# area doesn't "exist" until entries for this space exists in the Translation Tree.
logical=$00fa0000
physical=$ff7a0000
size=128*1024
pd_flags=c_p

# Then we map the standard Atari I/O area up to where the Hades have it mapped.
logical=$00ff8700
physical=$ffff8700
size=$00ffffff-$00ff8700+1
pd_flags=c_p

#-----------------------------------------------------------------------------
# The following blocks are the same on every Hades machines, so you don't need
# to change anythine blow this point.

# This is the Memory configuration area.
logical=$70000000
physical=$70000000
size=$71ffffff-$70000000+1
pd_flags=c_p

# The Hades ROM
logical=$7fe00000
physical=$7fe00000
size=$7fffffff-$7fe00000+1
pd_flags=c_p

# This is the PCI Memory area. This is where the screen is located, at least
# with my ET6000 card. HADES_B4.ACC sets this area to "c_wt" (using the ttr's)
#, i.e., uses WriteTrough caching. We set it to non-cachable, as I don't see
# any point in caching video memory and spoil the data cache with lots of pixels.
logical=$80000000
physical=$80000000
size=$8fffffff-$80000000+1
pd_flags=c_p

# This block covers the four PCI configuration areas.
logical=$a0010000
physical=$a0010000
size=$a008ffff-$a0010000+1
pd_flags=c_p

# And here is the PCI I/O area located
logical=$b0000000
physical=$b0000000
size=$bfffffff-$b0000000+1
pd_flags=c_p

# VME A24:D16 area. I think that if one have a VME graphics card and knows
# where the video memory starts, one can set the that block to cachable, writetrough
logical=$fe000000
physical=$fe000000
size=$fefeffff-$fe000000+1
pd_flags=c_p

# VME A16:D16 area.
logical=$feff0000
physical=$feff0000
size=$feffffff-$feff0000+1
pd_flags=c_p

# This block defines the ISA-bus memory area.
logical=$ff000000
physical=$ff000000
size=$ff7fffff-$ff000000+1
pd_flags=c_p

# And here is three the ISA-bus I/O and other I/O
logical=$fff00000
physical=$fff00000
size=$fff7ffff-$fff00000+1
pd_flags=c_p

# And finally the last area of hardware I/O
logical=$ffff8700
physical=$ffff8700
size=$ffffffff-$ffff8700+1
pd_flags=c_p
