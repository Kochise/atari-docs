D:\TOS\BIOS

May 11, 1992

This directory contains the source for the BIOS.

TO BUILD: edit makefile to set CCODE= and MACHINE= appropriately, and say
make.  The makefile will copy a "switches.s" file from the "switches"
directory before assembling each .s file.  Files are based on varying
subsets of the full set of switches: some by country only, some by ROM/RAM,
etc.  Which files are affected by which switches is listed in the Makefile,
though you can also grep for them.

The result of the build will be allbios.xyz, where x is the machine code
letter, y is a or o for ram or rom, and z is the country code letter. This
file is also copied into ..\build for that step.

The RCS directory contains what you expect, except that startup.s and
bios.s only go back partway.  bios.s only goes back to 2.47, and startup.s
only back to 2.91 reliably, though it might go farther.  This is because of
bugs in RCS' error handling and temp file creation; some temp files wound
up empty during a checkin, and thus an empty file was in fact checked in
for some revs.

The file version.s is created by mkvers.prg.  It contains the date in hex
format as $MMDDYYYY and also in GEMDOS format. The two symbols are exported
so STARTUP.S can import them.  This means the date is always the date of
the build; if you want a whole set to have the same date, but you don't
build them all on the same day, futz with this.

I don't think there are any other surprises in this directory.

The makefile contains references to "optimize," which is a program that
post-processes Alcyon-complied assembly code to make it tighter. That
program causes bus errors under MultiTOS, so I took those lines out of the
makefile.

What I do when I need to make all the countries is make 9 copies of the
makefile, called makefile.u makefile.k makefile.g etc., each with ccode
changed.  Then I use a batch script to say "make -f makefile.g" and so on
to make them all.

The file sparrow.s is included by dmaread.s.  Dmaread.s is Minna's code,
not mine.  It keeps getting bigger as we add new disk interfaces.

----------------------------------------------------------------------------

DISK SPIN-UP DELAY

I've asked Minna for a version of dmaread.s with an extra entry point, to
check all drives to see if they're ready.  The reason we haven't done that
from the start is that SyQuest drives can't stand to be selected while
they're spinning up.  If you do they go into a coma and only a hard reset
wakes them up.  Other devices have trouble, too -- MegaFile 60's?  So we
can't just go around asking drives if they're ready.  But it would be nice
to be able to say (in NVRAM for instance) "I don't have any drives which
you CAN'T ask."  Then the BIOS could ask, and for each drive that responds
at all, wait for it to be ready.  Removable media is harder: those guys
might NEVER come ready if there's no cartridge.  I think the SCSI command
set includes probes for that, so if the answer is "no" you can also find
out if it has media at all.  Point is to wait until all extant drives are
ready, then continue the boot, rather than the useless and brainless
80-second delay we have now.

A refinement is to include bit masks for each bus, telling the code in
dmaread.s which drives NOT to scan.  Thus I might have a scanner or laser
printer or something which (A) isn't ready and (B) I don't care, and I can
still use this feature.

-------------------------------------------------------------------------

New XBIOS functions:

XBIOS functions have been allocated in blocks of 16, and now that we
need a bunch more of them for sparrow, the .if TT conditional in
trp14tab will have to go away.

Conditional & non-ROM allocated functions are:
0x28	    (40)	Cookie
0x2e	    (46)	NVMaccess
0x2f	    (47)	Waketime
0x30-0x3f   (48-63)	MetaDOS calls
0x40	    (64)	Blitmode
0x41-0x47   (65-71)	Arabic TOS calls
0x48-0x4f   (72-79)	assigned to ???
0x50-0x57   (80-87)	TT video calls
0x58-0x5f   (88-95)	(NEW) Sparrow video calls
0x60-0x7f   (96-127)	(NEW) DSP calls
0x80-0x9f	(128-159)	(NEW) sound calls

-------------------------------------------------------------------------

STARTUP BUG:

At dmarfail the cmp.b #ff,boot_dev_tab(pc,d4.w) is ILLEGAL on a 68000.
This causes illegal instruction errors on STBOOK when booting with no
DMA devices.

-------------------------------------------------------------------------

920701
Other startup stuff:

The startup code at "Determine 50hz or 60hz" is fucked for Sparrow,
because it may need to read NVRAM to find out PAL or NTSC.  I suppose
we'll just have to boot in PAL until we can read the user preference.
Actually, this is true for any ROMs that use ALLKBS in bios.

At "Setup the vblank deferred vector list", we have to install the
Sparrow palette setter at the top of the VBL queue.

Palettes are initialized by esc_init, so the BIOS doesn't have to.
Diagnostic cart is called before palettes are set up, and other carts
are called after esc_init has been called, so the code at 'Initialize
palette registers' can go away.

At 'auto-config mem cntrlr', the lines that test the power-fail bit
are commented out.  Hmm.
