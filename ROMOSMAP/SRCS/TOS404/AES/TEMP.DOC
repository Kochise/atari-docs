/*	Change code to compensate 3D objects	*/

	WORD
gr_slidebox(tree, parent, obj, isvert)
	REG LONG		tree;
	WORD		parent;
	WORD		obj;
	WORD		isvert;
{
	REG GRECT	*pt, *pc;	/* new pointer for Reg Opt	*/
	GRECT		t, c;
	REG LONG	divnd, divis;
	OBJECT		*objc;
	WORD		ptype,ctype;
	WORD		ret,setxy,setwh;

	pt = &t;
	pc = &c;
				/* get the parent real position */
	ob_actxywh(tree, parent, pc);
				/* get the relative position	*/
	ob_relxywh(tree, obj, pt);

	objc = tree;
 	ptype = objc[parent].ob_type >> 8;
	ctype = objc[obj].ob_type >> 8;	

	if ( ( ptype == X_3DIND ) || ( ptype == X_3DACT ) )
	  ptype = 1;
	else
	  ptype = 0;

	if ( ( ctype == X_3DIND ) || ( ctype == X_3DACT ) )
	  ctype = 1;
	else
	  ctype = 0;
	  
	setxy = 0;
	setwh = 0;
	if ( ctype ) 	/* if the child is 3D, then check 	    */
	{	
	  if ( !ptype ) /* if parent is not 3D, then the child is   */
	  {		/* ADJ3DPIX off, we need to adjust it	    */
  	    pt->g_x -= ADJ3DPIX;
	    pt->g_y -= ADJ3DPIX;
	    setxy = 1;	
	  }	
	  pt->g_w += (ADJ3DPIX << 1);
	  pt->g_h += (ADJ3DPIX << 1);
	  setwh = 1;
	}

	gr_dragbox( pt->g_w, pt->g_h, pt->g_x + pc->g_x, pt->g_y + pc->g_y, 
		    pc, &pt->g_x, &pt->g_y ); 

	if ( isvert )		/* vertical movement	*/
	{
	  divnd = pt->g_y - pc->g_y;
	  divis = pc->g_h - pt->g_h;
	}
	else			/* horizontal movement	*/
	{
	  divnd = pt->g_x - pc->g_x;
	  divis = pc->g_w - pt->g_w;
	}

	if (divis)
	{
	  ret = (divnd * 1000) / divis;
	  ret = mul_div( divnd, 1000, divis );
	  if ( ret > 1000 )
	    ret = 1000;
	  return( ret );
	}	
	else
	  return(0);
}

