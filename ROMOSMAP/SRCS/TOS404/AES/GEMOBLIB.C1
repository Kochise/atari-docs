/*	GEMOBLIB.C	03/15/84 - 02/08/85	Gregg Morris		*/
/*	to 68k		03/09/85 - 04/05/85	Lowell Webster		*/
/*	Reg Opt		03/11/85		Derek Mui		*/
/*	Clean up	09/19/85		Derek Mui		*/
/*	Trying 1.2	10/11/85		Derek Mui		*/
/*	removed one variable from get_par	01/03/87 Mike Schmal	*/
/*	Fix at ob_draw of get_par	3/9/87	Derek Mui		*/
/*	Restore back into C language from Ver 3.01	8/29/90	D.Mui	*/
/*	Added 3D and color icon			7/7/92	D.Mui		*/
/*	Folded in new 3D codes			8/1/92	D.Mui		*/

/*
*	-------------------------------------------------------------
*	GEM Application Environment Services		  Version 1.1
*	Serial No.  XXXX-0000-654321		  All Rights Reserved
*	Copyright (C) 1985			Digital Research Inc.
*	-------------------------------------------------------------
*/

#include <portab.h>
#include <machine.h>
#include <struct88.h>
#include <baspag88.h>
#include <obdefs.h>
#include <taddr.h>
#include <gemlib.h>
#include <vdidefs.h>
#include <funcdef.h>

/*****************************************************************/
/*                   COLOR ICON DECLARATIONS                     */
/*****************************************************************/
WORD *fix_mono(), *fix_res();

WORD gl_colmask[128];		/* global mask used by color icons */
				/* WARNING:  The size of this array has been */
				/* set to 128 words and no bound checking is */
				/* done by the code currently.  This can  */
				/* handle icons of 64 by 64 pixels.       */

EXTERN WORD 	gl_nplanes;	/* number of planes in current res */
EXTERN FDB	gl_src, gl_dst;
EXTERN WORD	ptsin[];

/******************** END COLOR *******************************/

						/* in GSXBIND.C		*/
#define vsf_color( x )		gsx_1code(S_FILL_COLOR, x)

EXTERN VOID	gsx_moff();
EXTERN VOID	gsx_mon();
EXTERN WORD	gsx_chkclip();

EXTERN WORD	gl_width;
EXTERN WORD	gl_height;

EXTERN WORD	gl_wclip;
EXTERN WORD	gl_hclip;

EXTERN WORD	gl_wchar;
EXTERN WORD	gl_hchar;

EXTERN LONG	ad_intin;
EXTERN WORD	intin[];

EXTERN THEGLO	D;
EXTERN	WORD	gl_ws[];

GLOBAL TEDINFO	edblk;
GLOBAL BITBLK	bi;
GLOBAL ICONBLK	ib;

/* July 30 1992 - ml. 3D-look options */
EXTERN UWORD	ind3dtxt, ind3dface, act3dtxt, act3dface;

/* June 24 1992 - ml. Button and alert background colors */
EXTERN UWORD	gl_indbutcol, gl_actbutcol, gl_alrtcol;



	UWORD
far_call( fcode,fdata )
	WORD	(*fcode)();
	LONG	fdata;
{
	return( (*fcode)(fdata) );
}



/*
 *	Routine to get or set object extension settings
 *
 */
WORD
ob_sysvar(mode, which, inval1, inval2, outval1, outval2)
UWORD	mode, which, inval1, inval2, *outval1, *outval2;
{
    int	ret;

    ret = TRUE;			    /* assume OK */

    if (mode) {	    /* if set */

	switch (which) {
	    case LK3DIND:
	    case LK3DACT:
		if (inval1 != -1) {
		    if (which == LK3DIND) {
			ind3dtxt = inval1;
		    } else {
			act3dtxt = inval1;
		    }
		}

		if (inval2 != -1) {
		    if (which == LK3DIND) {
			ind3dface = inval2;
		    } else {
			act3dface = inval2;
		    }
		}

		break;

	    case INDBUTCOL:
	    case ACTBUTCOL:
	    case ALRTCOL:
		if (gl_ws[13] <= inval1)    /* word 13 is ws_ncolors */
	    	    return (FALSE);	    /* return error if invalid */

		if (which == INDBUTCOL)
		    gl_indbutcol = inval1;  /* set indicator button color */
		else if (which == ACTBUTCOL)
		    gl_actbutcol = inval1;  /* set activator button color */
		else
		    gl_alrtcol = inval1;    /* set alert background color */

		break;

	    default:
		ret = FALSE;	    /* error */
		break;
	}

    } else {	    /* if get */

	switch (which) {
	    case LK3DIND:
		*outval1 = ind3dtxt;
		*outval2 = ind3dface;
		break;
	    case LK3DACT:
		*outval1 = act3dtxt;
		*outval2 = act3dface;
		break;
	    case INDBUTCOL:
		*outval1 = gl_indbutcol;
		break;
	    case ACTBUTCOL:
		*outval1 = gl_actbutcol;
		break;
	    case ALRTCOL:
		*outval1 = gl_alrtcol;
		break;
	    default:
		ret = FALSE;	    /* error */
		break;
	}

    }
    return ret;
}


/*
*	Routine to take an unformatted raw string and based on a
*	template string build a formatted string.
*/
	VOID
ob_format(just, raw_str, tmpl_str, fmt_str)
	WORD		just;
	BYTE		*raw_str, *tmpl_str, *fmt_str;
{
	REG BYTE		*pfbeg, *ptbeg, *prbeg;
	BYTE		*pfend, *ptend, *prend;
	REG WORD		inc, ptlen, prlen;

	if (*raw_str == '@')
	  *raw_str = NULL;

	pfbeg = fmt_str;
	ptbeg = tmpl_str;
	prbeg = raw_str;

	ptlen = strlen(tmpl_str);
	prlen = strlen(raw_str);

	inc = 1;
	pfbeg[ptlen] = NULL;
	if (just == TE_RIGHT)
	{
	  inc = -1;
	  pfbeg = pfbeg + ptlen - 1;
	  ptbeg = ptbeg + ptlen - 1;
	  prbeg = prbeg + prlen - 1;
	}

	pfend = pfbeg + (inc * ptlen);
	ptend = ptbeg + (inc * ptlen);
	prend = prbeg + (inc * prlen);

	while( ptbeg != ptend )
	{
	  if ( *ptbeg != '_')
	    *pfbeg = *ptbeg;
	  else
	  {
	    if ( prbeg != prend )
	    {
	      *pfbeg = *prbeg;
	      prbeg += inc;
	    }
	    else
	      *pfbeg = '_';
	  } /* else */
	  pfbeg += inc;
	  ptbeg += inc;
	} /* while */
} /* ob_format */


/*
*	Routine to load up and call a user defined object draw or change 
*	routine.
*/

	WORD
ob_user(tree, obj, pt, spec, curr_state, new_state)
	LONG		tree;
	WORD		obj;
	GRECT		*pt;
	LONG		spec;
	WORD		curr_state;
	WORD		new_state;
{
	PARMBLK		pb;

	pb.pb_tree = tree;
	pb.pb_obj = obj;
	pb.pb_prevstate = curr_state;
	pb.pb_currstate = new_state;
	rc_copy(pt, &pb.pb_x); 
	gsx_gclip(&pb.pb_xc);
	pb.pb_parm = LLGET(spec+4);
	return(  far_call(LLGET(spec), ADDR(&pb)) );
}



/*
 *  Draw highlights around a rectangle depending on its state
 */
VOID
draw_hi(prect, state, clip, th, xobtype)
REG GRECT   *prect;	/* object rectangle */
WORD	    state;	/* NORMAL or SELECTED */
WORD	    clip;	/* 1: set clipping rect to object itself */
WORD	    th;		/* thickness of rectangle */
WORD	    xobtype;	/* 3D extended object type */
{
    WORD	pts[12], col;
    GRECT	r;

    gsx_moff();
    gsx_1code(15, 7);
    gsx_1code(113, -1);			/* solid line style */

    if (clip)
	gsx_sclip(prect);

    rc_copy(prect, &r);

    if (th > 0) {			/* if border is inside,	    */
	r.g_x += th;			/* object area is 1 pixel   */
	r.g_y += th;			/* in all around	    */
	r.g_w -= th<<1;
	r.g_h -= th<<1;
    }

    pts[0] = pts[2] = r.g_x;
    pts[3] = pts[5] = r.g_y;
    pts[1] = pts[3] + r.g_h - 1;
    pts[4] = pts[2] + r.g_w - 1;

    if (state & SELECTED) {
	if (xobtype == X_3DIND)
	    gsx_attr(0, MD_REPLACE, BLACK);
	else
	    gsx_attr(0, MD_REPLACE, LBLACK);
    } else { /* if not selected */
	gsx_attr(0, MD_REPLACE, WHITE);
    }

    v_pline(3, pts);

    /* pts 1, 4, 5 same as above */
    pts[0] += 1;
    pts[2] = pts[4];
    pts[3] = pts[1];
    pts[5] += 1;

    if (state & SELECTED) {
	if (xobtype == X_3DIND)
	    gsx_attr(0, MD_REPLACE, LWHITE);
	else
	    gsx_attr(0, MD_REPLACE, WHITE);
    } else { /* if not selected */
	gsx_attr(0, MD_REPLACE, LBLACK);
    }

    v_pline(3, pts);

    gsx_mon();
}


/*
 * Routine to XOR color in any resolution as if there is only 16 colors.
 */
WORD
xor16(col)
int col;
{
    col &= 0x000f;

    if (col == WHITE || col == LWHITE)
	col += 1;
    else if (col == BLACK || col == LBLACK)
	col -= 1 ;
    else if (col < LWHITE)
	col += 8 ;
    else
	col -= 8;

    return col;
}

#if 0
/*
*	Routine to draw an object from an object tree.
*/
	VOID
just_draw(tree, obj, sx, sy)
	REG LONG		tree;
	REG WORD		obj;
	REG WORD		sx, sy;
{
	WORD		bcol, tcol, ipat, icol, tmode, th;
	WORD		state, xobtype, obtype, len, flags;
	WORD		tmpx, tmpy, tmpth, thick;
	LONG		spec;
	BYTE		ch;
	GRECT		t, c;
	REG GRECT	*pt;
	BITBLK		bi;
	ICONBLK		ib;
	TEDINFO		edblk;
	UWORD		mvtxt, chcol, three_d;

	pt = &t;

	/* June 26 1992 - ml. */

	ch = ob_sst(tree, obj, &spec, &state, &xobtype, &obtype, &flags, 
		pt, &th);

	if ( (flags & HIDETREE) || (spec == -1L) )
	  return;

	thick = th;

	pt->g_x = sx;
	pt->g_y = sy;

			/* 8/1/92 */
	three_d = 0;	/* assume object is not 3D */
	chcol = 0;

	if (xobtype == X_3DIND || xobtype == X_3DACT) {
	    three_d = 1;		/* object is 3D */
	    tmpx = ADJ3DPIX;
	    pt->g_x -= tmpx;		/* expand object to accomodate */
	    pt->g_y -= tmpx;		/*  hi-lights for 3D */
	    pt->g_w += (tmpx << 1);
	    pt->g_h += (tmpx << 1);

	    if (xobtype == X_3DIND) {	/* if it's a 3D indicator */
		mvtxt = ind3dtxt;
		chcol = ind3dface;
	    } else {			/* if it's a 3D activator */
		mvtxt = act3dtxt;
		chcol = act3dface;
	    }
	}

						/* do trivial reject	*/
						/*  with full extent	*/
						/*  including, outline, */
						/*  shadow, & thickness	*/
	if (gl_wclip && gl_hclip)
	{
	  rc_copy(pt, &c);
	  if (state & OUTLINED)
	    gr_inside(&c, -3);
	  else
	    gr_inside( &c, ((th < 0) ? (3 * th) : (-3 * th)));
	
	  if ( !(gsx_chkclip(&c)) )
	    return;
	}
						/* for all tedinfo	*/
	rc_copy( pt, &c );			/*   types get copy of	*/
						/*   ted and crack the	*/
						/*   color word and set	*/
						/*   the text color	*/
	if ( obtype != G_STRING )
	{
	  tmpth = (th < 0) ? 0 : th;
	  tmode = MD_REPLACE;
	  tcol = BLACK;
	  switch( obtype )
	  {
	    case G_BOXTEXT:
	    case G_FBOXTEXT:
	    case G_TEXT:
	    case G_FTEXT:
		  LBCOPY(&edblk, spec, sizeof(TEDINFO));
		  gr_crack(edblk.te_color, &bcol,&tcol, &ipat, &icol, &tmode);
		break;
	  }
						/* for all box types	*/
						/*   crack the color 	*/
						/*   if not ted and	*/
						/*   draw the box with	*/
						/*   border		*/
	  switch( obtype )
	  {
	    case G_BOX:
	    case G_BOXCHAR:
	    case G_IBOX:
		gr_crack(LLOWD(spec), &bcol, &tcol, &ipat, &icol, &tmode);
	    case G_BUTTON:
		if (obtype == G_BUTTON)
		{
		  bcol = BLACK;
		  
		  /* May 13 1992 - ml */
		  if (three_d) {		/* 8/1/92 */
		    ipat = IP_SOLID;
		    if (xobtype == X_3DIND) {
			icol = gl_indbutcol;
		    } else {
			icol = gl_actbutcol;
		    }
		  } else {
		    ipat = IP_HOLLOW;
		    icol = WHITE;
		  }

		}
	    case G_BOXTEXT:
	    case G_FBOXTEXT:
						/* draw box's border	*/
		if ( th != 0 )
		{
		  gsx_attr(FALSE, MD_REPLACE, bcol);
		  gr_box(pt->g_x, pt->g_y, pt->g_w, pt->g_h, th);
		}
						/* draw filled box	*/
		if (obtype != G_IBOX)		/* 8/1/92 */
		{
		  gr_inside(pt, tmpth);
		  if ((state & SELECTED) && ( three_d || chcol))
		    icol = xor16(icol);
		  gr_rect(icol, ipat, pt); 
		  gr_inside(pt, -tmpth);

		}
		break;
	  }
					/* 8/1/92 */
	  if ((state & SELECTED) && ( three_d || chcol))
	    tcol = xor16(tcol);

	  gsx_attr(TRUE, tmode, tcol);
						/* do whats left for	*/
						/*   all the other types*/
	  switch( obtype )
	  {
	    case G_FTEXT:
	    case G_FBOXTEXT:
		LSTCPY(&D.g_rawstr[0], edblk.te_ptext);
		LSTCPY(&D.g_tmpstr[0], edblk.te_ptmplt);
		ob_format(edblk.te_just, &D.g_rawstr[0], &D.g_tmpstr[0], 
			&D.g_fmtstr[0]);
						/* fall thru to gr_gtext*/
	    case G_BOXCHAR:
		edblk.te_ptext = &D.g_fmtstr[0];
		if (obtype == G_BOXCHAR)
		{
		  D.g_fmtstr[0] = ch;
		  D.g_fmtstr[1] = NULL;
		  edblk.te_just = TE_CNTR;
		  edblk.te_font = IBM;
		}
						/* fall thru to gr_gtext*/
	    case G_TEXT:
	    case G_BOXTEXT:
		gr_inside(pt, tmpth);
/* June 2 1992 - ml.
		gr_gtext(edblk.te_just, edblk.te_font, edblk.te_ptext, 
				pt, tmode);
/**/
/* July 30 1992 - ml.  Draw text of 3D objects */	/* 8/1/92 */

		if (three_d) {
		    if (!(state & SELECTED) && mvtxt) {
			pt->g_x -= 1;
			pt->g_y -= 1;
			gr_gtext(edblk.te_just, edblk.te_font, 
			    edblk.te_ptext, pt, tmode);
			pt->g_x += 1;
			pt->g_y += 1;
		    } else {
			gr_gtext(edblk.te_just, edblk.te_font, 
			    edblk.te_ptext, pt, tmode);
		    }

		} else {
		    gr_gtext(edblk.te_just, edblk.te_font, edblk.te_ptext, 
				pt, tmode);
		}

/**/
		gr_inside(pt, -tmpth);
		break;
	    case G_IMAGE:
		LBCOPY(&bi, spec, sizeof(BITBLK));
		gsx_blt(bi.bi_pdata, bi.bi_x, bi.bi_y, bi.bi_wb,
				0x0L, pt->g_x, pt->g_y, gl_width/8, bi.bi_wb * 8,
				bi.bi_hl, MD_TRANS, bi.bi_color, WHITE);
		break;
	    case G_ICON:
		LBCOPY(&ib, spec, sizeof(ICONBLK));
		ib.ib_xicon += pt->g_x;
		ib.ib_yicon += pt->g_y; 
		ib.ib_xtext += pt->g_x;
		ib.ib_ytext += pt->g_y; 
		gr_gicon(state, ib.ib_pmask, ib.ib_pdata, ib.ib_ptext,
		  ib.ib_char, ib.ib_xchar, ib.ib_ychar,
		  &ib.ib_xicon, &ib.ib_xtext);
		state &= ~SELECTED;
		break;
	    case G_CICON:
		/* Identical to the monochrome icon case (above) */
		/* except for the gr_cicon() call.		 */
		LBCOPY(&ib, spec, sizeof(ICONBLK));
		ib.ib_xicon += pt->g_x;
		ib.ib_yicon += pt->g_y; 
		ib.ib_xtext += pt->g_x;
		ib.ib_ytext += pt->g_y; 
		gr_cicon(state, ib.ib_pmask, ib.ib_pdata, ib.ib_ptext,
		  ib.ib_char, ib.ib_xchar, ib.ib_ychar,
		  &ib.ib_xicon, &ib.ib_xtext, (CICONBLK *) spec);
		state &= ~SELECTED;
		break;
	    case G_USERDEF:
		state = ob_user(tree, obj, pt, spec, state, state);
		break;
	  } /* switch type */
	}
	if ( (obtype == G_STRING) ||	/* 8/1/92 */
	     (obtype == G_TITLE) ||
             (obtype == G_BUTTON) )
	{
	  len = LBWMOV(ad_intin, spec);
	  if (len)
	  { 
	    if ((state & SELECTED) && (!three_d || chcol))
		gsx_attr(TRUE, MD_TRANS, WHITE);
	    else
		gsx_attr(TRUE, MD_TRANS, BLACK);
	    tmpy = pt->g_y + ((pt->g_h-gl_hchar)/2);
	    if (obtype == G_BUTTON) {
	      tmpx = pt->g_x + ((pt->g_w-(len*gl_wchar))/2);
	      
/* July 30 1992 - ml. */
	      if (three_d) {
		if (!(state & SELECTED) && mvtxt) {
		    tmpx -= 1;
		    tmpy -= 1;
		}
	      }
/**/
	    } else {
	      tmpx = pt->g_x;
	    }

	    gsx_tblt(IBM, tmpx, tmpy, len);
	  }
	}

	if (state)
	{
	  if ( state & OUTLINED )
	  {
	      gsx_attr(FALSE, MD_REPLACE, BLACK);
	      gr_box(pt->g_x-3, pt->g_y-3, pt->g_w+6, pt->g_h+6, 1);
	      gsx_attr(FALSE, MD_REPLACE, WHITE);
	      gr_box(pt->g_x-2, pt->g_y-2, pt->g_w+4, pt->g_h+4, 2);
	  }

	  if (th > 0)
	    gr_inside(pt, th);
	  else 
	    th = -th;

	  if ( (state & SHADOWED) && th )
	  {
	    vsf_color(bcol);
	    bb_fill(MD_REPLACE, FIS_SOLID, 0, pt->g_x, pt->g_y+pt->g_h+th,
				pt->g_w + th, 2*th);
	    bb_fill(MD_REPLACE, FIS_SOLID, 0, pt->g_x+pt->g_w+th, pt->g_y, 
			2*th, pt->g_h+(3*th));
	  }

	  if ( state & CHECKED )
	  {
	    gsx_attr(TRUE, MD_TRANS, BLACK);
	    intin[0] = '\010';			/* a check mark	*/
	    gsx_tblt(IBM, pt->g_x+2, pt->g_y, 1);
	  }

	  if ( state & CROSSED )
	  {
	    gsx_attr(FALSE, MD_TRANS, WHITE);
	    gsx_cline(pt->g_x, pt->g_y, pt->g_x+pt->g_w-1, pt->g_y+pt->g_h-1);
	    gsx_cline(pt->g_x, pt->g_y+pt->g_h-1, pt->g_x+pt->g_w-1, pt->g_y);
	  }

	  if ( state & DISABLED )
	  {
	    vsf_color(WHITE);
	    bb_fill(MD_TRANS, FIS_PATTERN, IP_4PATT, pt->g_x, pt->g_y,
			 pt->g_w, pt->g_h);
	  }

	  if ( ( state & SELECTED ) && !three_d )
	  {
	     bb_fill( MD_XOR, FIS_SOLID, IP_SOLID, pt->g_x, pt->g_y,
		      pt->g_w, pt->g_h );		
	  }


/* July 30 1992 - ml */	/* 8/1/92 */
	}

	if (three_d) {
	  if (state & SELECTED)
	    draw_hi(&c, SELECTED, FALSE, thick, xobtype);
	  else
	    draw_hi(&c, NORMAL, FALSE, thick, xobtype);
/**/
	}

} /* just_draw */
#endif




/*
*	Routine to draw an object from an object tree.
*/
	VOID
just_draw(tree, obj, sx, sy)
	REG LONG		tree;
	REG WORD		obj;
	REG WORD		sx, sy;
{
	WORD		bcol, tcol, ipat, icol, tmode, th;
	WORD		state, xobtype, obtype, len, flags;
	LONG		spec;
	WORD		tmpx, tmpy, tmpth, thick;
	BYTE		ch;
	GRECT		t, c;
	REG GRECT	*pt;
	UWORD		mvtxt, chcol, three_d;

	pt = &t;

	ch = ob_sst(tree, obj, &spec, &state, &xobtype, &obtype, &flags, 
		pt, &th);

	if ( (flags & HIDETREE) ||
	     (spec == -1L) )
	  return;

	thick = th;

	pt->g_x = sx;
	pt->g_y = sy;

	three_d = 0;	/* assume object is not 3D */
	if (xobtype == X_3DIND || xobtype == X_3DACT) {
	    three_d = 1;		/* object is 3D */
	    tmpx = ADJ3DPIX;
	    pt->g_x -= tmpx;		/* expand object to accomodate */
	    pt->g_y -= tmpx;		/*  hi-lights for 3D */
	    pt->g_w += (tmpx << 1);
	    pt->g_h += (tmpx << 1);

	    if (xobtype == X_3DIND) {	/* if it's a 3D indicator */
		mvtxt = ind3dtxt;
		chcol = ind3dface;
	    } else {			/* if it's a 3D activator */
		mvtxt = act3dtxt;
		chcol = act3dface;
	    }
	}
						/* do trivial reject	*/
						/*  with full extent	*/
						/*  including, outline, */
						/*  shadow, & thickness	*/
	if (gl_wclip && gl_hclip)
	{
	  rc_copy(pt, &c);
	  if (state & OUTLINED)
	    gr_inside(&c, -3);
	  else
	    gr_inside( &c, ((th < 0) ? (3 * th) : (-3 * th)));
	
	  if ( !(gsx_chkclip(&c)) )
	    return;
	}

	rc_copy(pt, &c);			/* save rect coords */

						/* for all tedinfo	*/
						/*   types get copy of	*/
						/*   ted and crack the	*/
						/*   color word and set	*/
						/*   the text color	*/
	if ( obtype != G_STRING )
	{
	  tmpth = (th < 0) ? 0 : th;
	  tmode = MD_REPLACE;
	  tcol = BLACK;
	  switch( obtype )
	  {
	    case G_BOXTEXT:
	    case G_FBOXTEXT:
	    case G_TEXT:
	    case G_FTEXT:
		  LBCOPY(&edblk, spec, sizeof(TEDINFO));
		  gr_crack(edblk.te_color, &bcol,&tcol, &ipat, &icol, &tmode);
		break;
	 }
						/* for all box types	*/
						/*   crack the color 	*/
						/*   if not ted and	*/
						/*   draw the box with	*/
						/*   border		*/
	  switch( obtype )
	  {
	    case G_BOX:
	    case G_BOXCHAR:
	    case G_IBOX:
		gr_crack(LLOWD(spec), &bcol, &tcol, &ipat, &icol, &tmode);
	    case G_BUTTON:
		if (obtype == G_BUTTON)
		{
		  bcol = BLACK;
		  
		  /* May 13 1992 - ml */
		  if (three_d) {
		    ipat = IP_SOLID;
		    if (xobtype == X_3DIND) {
			icol = gl_indbutcol;
		    } else {
			icol = gl_actbutcol;
		    }
		  } else {
		    ipat = IP_HOLLOW;
		    icol = WHITE;
		  }

		}
	    case G_BOXTEXT:
	    case G_FBOXTEXT:
						/* draw box's border	*/
		if ( th != 0 )
		{
		  gsx_attr(FALSE, MD_REPLACE, bcol);
		  gr_box(pt->g_x, pt->g_y, pt->g_w, pt->g_h, th);
		}
						/* draw filled box	*/
		if (obtype != G_IBOX)
		{
		  gr_inside(pt, tmpth);
		  if ((state & SELECTED) && (!three_d || chcol))
		    icol = xor16(icol);
		  gr_rect(icol, ipat, pt); 
		  gr_inside(pt, -tmpth);

		}
		break;
	  }
	  if ((state & SELECTED) && (!three_d || chcol))
	    tcol = xor16(tcol);
	  gsx_attr(TRUE, tmode, tcol);
						/* do whats left for	*/
						/*   all the other types*/
	  switch( obtype )
	  {
	    case G_FTEXT:
	    case G_FBOXTEXT:
		LSTCPY(&D.g_rawstr[0], edblk.te_ptext);
		LSTCPY(&D.g_tmpstr[0], edblk.te_ptmplt);
		ob_format(edblk.te_just, &D.g_rawstr[0], &D.g_tmpstr[0], 
			&D.g_fmtstr[0]);
						/* fall thru to gr_gtext*/
	    case G_BOXCHAR:
		edblk.te_ptext = &D.g_fmtstr[0];
		if (obtype == G_BOXCHAR)
		{
		  D.g_fmtstr[0] = ch;
		  D.g_fmtstr[1] = NULL;
		  edblk.te_just = TE_CNTR;
		  edblk.te_font = IBM;
		}
						/* fall thru to gr_gtext*/
	    case G_TEXT:
	    case G_BOXTEXT:
		gr_inside(pt, tmpth);
/* June 2 1992 - ml.
		gr_gtext(edblk.te_just, edblk.te_font, edblk.te_ptext, 
				pt, tmode);
/**/
/* July 30 1992 - ml.  Draw text of 3D objects */

		if (three_d) {
		    if (!(state & SELECTED) && mvtxt) {
			pt->g_x -= 1;
			pt->g_y -= 1;
			gr_gtext(edblk.te_just, edblk.te_font, 
			    edblk.te_ptext, pt, tmode);
			pt->g_x += 1;
			pt->g_y += 1;
		    } else {
			gr_gtext(edblk.te_just, edblk.te_font, 
			    edblk.te_ptext, pt, tmode);
		    }

		} else {
		    gr_gtext(edblk.te_just, edblk.te_font, edblk.te_ptext, 
				pt, tmode);
		}

/**/
		gr_inside(pt, -tmpth);
		break;
	    case G_IMAGE:
		LBCOPY(&bi, spec, sizeof(BITBLK));
		gsx_blt(bi.bi_pdata, bi.bi_x, bi.bi_y, bi.bi_wb,
				0x0L, pt->g_x, pt->g_y, gl_width/8, bi.bi_wb * 8,
				bi.bi_hl, MD_TRANS, bi.bi_color, WHITE);
		break;
	    case G_ICON:
		LBCOPY(&ib, spec, sizeof(ICONBLK));
		ib.ib_xicon += pt->g_x;
		ib.ib_yicon += pt->g_y; 
		ib.ib_xtext += pt->g_x;
		ib.ib_ytext += pt->g_y; 
		gr_gicon(state, ib.ib_pmask, ib.ib_pdata, ib.ib_ptext,
		  ib.ib_char, ib.ib_xchar, ib.ib_ychar,
		  &ib.ib_xicon, &ib.ib_xtext);
		state &= ~SELECTED;
		break;
	    case G_USERDEF:
		state = ob_user(tree, obj, pt, spec, state, state);
		break;
	  } /* switch type */
	}
	if ( (obtype == G_STRING) ||
	     (obtype == G_TITLE) ||
             (obtype == G_BUTTON) )
	{
	  len = LBWMOV(ad_intin, spec);
	  if (len)
	  { 
	    if ((state & SELECTED) && (!three_d || chcol))
		gsx_attr(TRUE, MD_TRANS, WHITE);
	    else
		gsx_attr(TRUE, MD_TRANS, BLACK);
	    tmpy = pt->g_y + ((pt->g_h-gl_hchar)/2);
	    if (obtype == G_BUTTON) {
	      tmpx = pt->g_x + ((pt->g_w-(len*gl_wchar))/2);
	      
/* July 30 1992 - ml. */
	      if (three_d) {
		if (!(state & SELECTED) && mvtxt) {
		    tmpx -= 1;
		    tmpy -= 1;
		}
	      }
/**/
	    } else {
	      tmpx = pt->g_x;
	    }

	    gsx_tblt(IBM, tmpx, tmpy, len);
	  }
	}

	if (state)
	{
	  if ( state & OUTLINED )
	  {
	      gsx_attr(FALSE, MD_REPLACE, BLACK);
	      gr_box(pt->g_x-3, pt->g_y-3, pt->g_w+6, pt->g_h+6, 1);
	      gsx_attr(FALSE, MD_REPLACE, WHITE);
	      gr_box(pt->g_x-2, pt->g_y-2, pt->g_w+4, pt->g_h+4, 2);
	  }

	  if (th > 0)
	    gr_inside(pt, th);
	  else 
	    th = -th;

	  if ( (state & SHADOWED) && th )
	  {
	    vsf_color(bcol);
	    bb_fill(MD_REPLACE, FIS_SOLID, 0, pt->g_x, pt->g_y+pt->g_h+th,
				pt->g_w + th, 2*th);
	    bb_fill(MD_REPLACE, FIS_SOLID, 0, pt->g_x+pt->g_w+th, pt->g_y, 
			2*th, pt->g_h+(3*th));
	  }
	  if ( state & CHECKED )
	  {
	    gsx_attr(TRUE, MD_TRANS, BLACK);
	    intin[0] = '\010';			/* a check mark	*/
	    gsx_tblt(IBM, pt->g_x+2, pt->g_y, 1);
	  }
	  if ( state & CROSSED )
	  {
	    gsx_attr(FALSE, MD_TRANS, WHITE);
	    gsx_cline(pt->g_x, pt->g_y, pt->g_x+pt->g_w-1, pt->g_y+pt->g_h-1);
	    gsx_cline(pt->g_x, pt->g_y+pt->g_h-1, pt->g_x+pt->g_w-1, pt->g_y);
	  }
	  if ( state & DISABLED )
	  {
	    vsf_color(WHITE);
	    bb_fill(MD_TRANS, FIS_PATTERN, IP_4PATT, pt->g_x, pt->g_y,
			 pt->g_w, pt->g_h);
	  }

/* July 30 1992 - ml */
	}

	if (three_d) {
	  if (state & SELECTED)
	    draw_hi(&c, SELECTED, FALSE, thick, xobtype);
	  else
	    draw_hi(&c, NORMAL, FALSE, thick, xobtype);
/**/
	}

} /* just_draw */




/*
*	Object draw routine that walks tree and draws appropriate objects.
*/
	VOID
ob_draw(tree, obj, depth)
	REG LONG	tree;
	WORD		obj, depth;
{
	WORD		last, pobj;
	WORD		sx, sy;

	last = ( obj == ROOT ) ? NIL : LWGET(OB_NEXT(obj));

	pobj = get_par(tree, obj);

	if (pobj != NIL)
	  ob_offset(tree, pobj, &sx, &sy);
	else
	  sx = sy = 0;

	gsx_moff();
	everyobj(tree, obj, last, just_draw, sx, sy, depth);
	gsx_mon();
}


/*
*	Routine to find out which object a certain mx,my value is
*	over.  Since each parent object contains its children the
*	idea is to walk down the tree, limited by the depth parameter,
*	and find the last object the mx,my location was over.
*/

/************************************************************************/
/* o b _ f i n d							*/
/************************************************************************/
	WORD
ob_find(tree, currobj, depth, mx, my)
	REG LONG		tree;
	REG WORD		currobj;
	REG WORD		depth;
	WORD		mx, my;
{
	WORD		lastfound;
	WORD		dosibs, done;
	GRECT		t, o;
	WORD		parent, childobj, flags;
	REG GRECT	*pt;

	pt = &t;

	lastfound = NIL;

	if (currobj == 0)
	  r_set(&o, 0, 0, 0, 0);
	else
	{
	  parent = get_par(tree, currobj);
	  ob_actxywh(tree, parent, &o);
	}
	
	done = FALSE;
	dosibs = FALSE;

	while( !done )
	{
						/* if inside this obj,	*/
						/*   might be inside a	*/
						/*   child, so check	*/
	  ob_relxywh(tree, currobj, pt);
	  pt->g_x += o.g_x;
	  pt->g_y += o.g_y;

	  flags = LWGET(OB_FLAGS(currobj));
	  if ( (inside(mx, my, pt)) &&
	       (!(flags & HIDETREE)) )
	  {
	    lastfound = currobj;

	    childobj = LWGET(OB_TAIL(currobj));
	    if ( (childobj != NIL) && depth)
	    {
	      currobj = childobj;
	      depth--;
	      o.g_x = pt->g_x;
	      o.g_y = pt->g_y;
	      dosibs = TRUE;
	    }
	    else
	      done = TRUE;
	  }
	  else
	  {
	    if ( (dosibs) &&
	         (lastfound != NIL) )
	    {
	        currobj = get_prev(tree, lastfound, currobj);
	        if (currobj == NIL)
	          done = TRUE;
	    }
	    else
	      done = TRUE;
	  }
	}
						/* if no one was found	*/
						/*   this will return	*/
						/*   NIL		*/
	return(lastfound);
} /* ob_find */


/*
*	Routine to add a child object to a parent object.  The child
*	is added at the end of the parent's current sibling list.
*	It is also initialized.
*/
	VOID
ob_add(tree, parent, child)
	REG LONG		tree;
	REG WORD		parent, child;
{
	REG WORD		lastkid;
	REG LONG		ptail;

	if ( (parent != NIL) &&
	     (child != NIL) )
	{
						/* initialize child	*/
	  LWSET(OB_NEXT(child), parent);

	  lastkid = LWGET( ptail = OB_TAIL(parent));
	  if (lastkid == NIL)
						/* this is parent's 1st	*/
						/*   kid, so both head	*/
						/*   and tail pt to it	*/
	    LWSET(OB_HEAD(parent), child);
	  else
						/* add kid to end of 	*/
						/*   kid list		*/
	    LWSET(OB_NEXT(lastkid), child);
	  LWSET(ptail, child);
	}
} /* ob_add */

/*
*	Routine to delete an object from the tree.
*/
	VOID
ob_delete(tree, obj)
	REG LONG		tree;
	REG WORD		obj;
{
	REG WORD		parent;
	WORD		prev, nextsib;
	REG LONG		ptail, phead;

	if (obj != ROOT) {
		nextsib = LWGET(OB_NEXT(obj));
		parent = get_par(tree, obj);
	}
	else
	  return;

	if ( LWGET(phead = OB_HEAD(parent)) == obj )
	{
						/* this is head child	*/
						/*   in list		*/
	  if ( LWGET(ptail = OB_TAIL(parent)) == obj)
	  {
						/* this is only child	*/
						/*   in list, so fix	*/
						/*   head & tail ptrs	*/
	    nextsib = NIL;
	    LWSET(ptail, NIL);
	  }
						/*   move head ptr to 	*/
						/*   next child in list	*/
	  LWSET(phead, nextsib);
	} /* if */
	else
	{
						/* it's somewhere else,	*/
						/*   so move pnext	*/
						/*   around it		*/
	  prev = get_prev(tree, parent, obj);
	  LWSET(OB_NEXT(prev), nextsib);
	  if ( LWGET(ptail = OB_TAIL(parent)) == obj)
						/* this is last child	*/
						/*   in list, so move	*/
						/*   tail ptr to prev	*/
						/*   child in list	*/
	    LWSET(ptail, prev);
	} /* else */
} /* ob_delete */


/*
*	Routine to change the order of an object relative to its
*	siblings in the tree.  0 is the head of the list and NIL
*	is the tail of the list.
*/
	VOID
ob_order(tree, mov_obj, new_pos)
	REG LONG	tree;
	REG WORD	mov_obj;
	WORD		new_pos;
{
	REG WORD	parent;
	WORD		chg_obj, ii;
	REG LONG	phead, pnext, pmove;

	if (mov_obj != ROOT)
	  parent = get_par(tree, mov_obj);
	else
	  return;

	ob_delete(tree, mov_obj);
	chg_obj = LWGET(phead = OB_HEAD(parent));
	pmove = OB_NEXT(mov_obj);
	if (new_pos == 0)
	{
						/* put mov_obj at head	*/
						/*   of list		*/
	  LWSET(pmove, chg_obj);
	  LWSET(phead, mov_obj);
	}
	else
	{
						/* find new_pos		*/
	  if (new_pos == NIL)
	    chg_obj = LWGET(OB_TAIL(parent));
	  else
	  {
	    for (ii = 1; ii < new_pos; ii++)
	      chg_obj = LWGET(OB_NEXT(chg_obj));
	  } /* else */
						/* now add mov_obj 	*/
						/*   after chg_obj	*/
	  LWSET(pmove, LWGET(pnext = OB_NEXT(chg_obj)));
	  LWSET(pnext, mov_obj);
	}
	if (LWGET(pmove) == parent)
	  LWSET(OB_TAIL(parent), mov_obj);
} /* ob_order */



/************************************************************************/
/* o b _ e d i t 							*/
/************************************************************************/
/* see OBED.C								*/

/*
*	Routine to change the state of an object and redraw that
*	object using the current clip rectangle.
*/
	VOID
ob_change(tree, obj, new_state, redraw)
	REG LONG		tree;
	REG WORD		obj;
	UWORD		new_state;
	WORD		redraw;
{
	WORD		flags, obtype, th, thick;
	GRECT		t;
	UWORD		curr_state,xobtype;
	LONG		spec;
	REG GRECT	*pt;
	pt = &t;
	
	ob_sst(tree, obj, &spec, &curr_state, &xobtype, &obtype, &flags, pt, &th);
	thick = th;

	if ( (curr_state == new_state) ||
	     (spec == -1L) )
	  return;	


	LWSET(OB_STATE(obj), new_state);

	if (redraw)
	{
	  ob_offset(tree, obj, &pt->g_x, &pt->g_y);

	  gsx_moff();

	  th = (th < 0) ? 0 : th;

	  if ( obtype == G_USERDEF )
	  {
	    ob_user(tree, obj, pt, spec, curr_state, new_state);
	    redraw = FALSE;
	  }
	  else
	  {
	    if ( (obtype != G_ICON) &&
	       ((new_state ^ curr_state) & SELECTED) )
	    {
/* June 26 1992 - ml */
		if ( ( xobtype != X_3DIND ) && ( xobtype != X_3DACT ) )
		{
		    bb_fill(MD_XOR, FIS_SOLID, IP_SOLID, pt->g_x+th, 
			pt->g_y+th, pt->g_w-(2*th), pt->g_h-(2*th));
		}
		else 
		{
		   just_draw(tree, obj, pt->g_x, pt->g_y);
		}
		redraw = FALSE;
/**/
	    }
	  }

	  if (redraw)
	    just_draw(tree, obj, pt->g_x, pt->g_y);

	  gsx_mon();
	}
	return;
} /* ob_change */



	UWORD
ob_fs(tree, ob, pflag)
	LONG	tree;
	WORD	ob;
	WORD	*pflag;
{
	*pflag = LWGET(OB_FLAGS(ob));
	return(LWGET(OB_STATE(ob)));
}


/************************************************************************/
/* o b _ a c t x y w h							*/
/************************************************************************/
	VOID
ob_actxywh(tree, obj, pt)
	REG LONG		tree;
	REG WORD		obj;
	REG GRECT		*pt;
{
	ob_offset(tree, obj, &pt->g_x, &pt->g_y);
	pt->g_w = LWGET(OB_WIDTH(obj));	
	pt->g_h = LWGET(OB_HEIGHT(obj));	
} /* ob_actxywh */


/************************************************************************/
/* o b _ r e l x y w h							*/
/************************************************************************/
	VOID
ob_relxywh(tree, obj, pt)
	LONG		tree;
	WORD		obj;
	GRECT		*pt;
{
	LWCOPY(ADDR(pt), OB_X(obj), sizeof(GRECT)/2);
} /* ob_relxywh */


	VOID
ob_setxywh(tree, obj, pt)
	LONG		tree;
	WORD		obj;
	GRECT		*pt;
{
	LWCOPY(OB_X(obj), ADDR(pt), sizeof(GRECT)/2);
}


/*
*	Routine to find the x,y offset of a particular object relative
*	to the physical screen.  This involves accumulating the offsets
*	of all the objects parents up to and including the root.
*/
	VOID
ob_offset(tree, obj, pxoff, pyoff)
	REG LONG		tree;
	REG WORD		obj;
	REG WORD		*pxoff, *pyoff;
{
	*pxoff = *pyoff = 0;
	do
	{
						/* have our parent--	*/
						/*  add in his x, y	*/
	  *pxoff += LWGET(OB_X(obj));
	  *pyoff += LWGET(OB_Y(obj));
	  obj = get_par(tree, obj);
	} while ( obj != NIL );
} /* ob_offset */


/*
*	Routine to find the object that is previous to us in the
*	tree.  The idea is we get our parent and then walk down
*	his list of children until we find a sibling who points to
*	us.  If we are the first child or we have no parent then
*	return NIL.
*/
	WORD
get_prev(tree, parent, obj)
	REG LONG		tree;
	WORD		parent;
	REG WORD		obj;
{
	REG WORD		prev, nobj, pobj;

	pobj = LWGET(OB_HEAD(parent));
	if (pobj != obj)
	{
	  while (TRUE)
	  {
	    nobj = LWGET(OB_NEXT(pobj));
	    if (nobj != obj)
	      pobj = nobj;
	    else
	      return(pobj);
	  }
	}
	else
	  return(NIL);
} /* get_prev */


/***************************************************************************/
/*									   */
/*			COLOR ICON ROUTINES				   */
/*									   */
/***************************************************************************/

/*	Takes a list of icons and returns the first icon that 
 *	has the same number of planes.  Returns a null pointer if no match.
 */
CICON *
match_planes( iconlist, planes )
CICON *iconlist;
int planes;
{
    CICON *tempicon;

    tempicon = iconlist;
    while (tempicon) {
	if (tempicon->num_planes == planes) break;
	else tempicon = tempicon->next_res;
    }
    return( tempicon );
}

/*
 *	Routine to draw a color icon, which is a graphic image with a text
 *	string underneath it.  Note that this routine is very similar to
 *	gr_icon().   It has an extra parameter which is the list of color
 *	icons for different resolutions.
 */
	VOID
gr_cicon(state, pmask, pdata, ptext, ch, chx, chy, pi, pt, cicon)
	REG WORD		state;
	LONG		pmask;
	LONG		pdata;
	LONG		ptext;
	REG WORD		ch;
	WORD		chx, chy;
	REG GRECT		*pi;
	REG GRECT		*pt;
	CICONBLK	*cicon;
{
    REG WORD		fgcol, bgcol, tmp;
						/* crack the color/char	*/
						/*   definition word	*/
    CICON *color;
    int col_select;		/* is there a color select icon */
    int i,j;

    color = match_planes( cicon->mainlist, gl_nplanes );

    fgcol = (ch >> 12) & 0x000f;
    bgcol = (ch >> 8) & 0x000f;
    ch &= 0x0ff;
						/* invert if selected	*/
    if (state & SELECTED)
    {
	tmp = fgcol;	
	fgcol = bgcol;
	bgcol = tmp;
    }

    col_select = 0;
					/* substitue mask if color avail */
    if ( color ) {
	if ( (state & SELECTED) && color->sel_data ) {
	    col_select = 1;
	    pdata = color->sel_data;
	    pmask = color->sel_mask;
	} else {
	    pdata = color->col_data;
	    pmask = color->mask;
	}
	if (state & SELECTED)
	{
	    tmp = fgcol;	
	    fgcol = bgcol;
	    bgcol = tmp;
	}
    }
	
						/* do mask unless its on*/
						/* a white background	*/
    if ( !( (state & WHITEBAK) && (bgcol == WHITE) ) )
    {
	gsx_blt(pmask, 0, 0, pi->g_w/8, 0x0L, pi->g_x, pi->g_y, 
		gl_width/8, pi->g_w, pi->g_h, MD_TRANS,
		bgcol, fgcol); 
	if ( color && (state & SELECTED) )
	    gr_rect(fgcol, IP_SOLID, pt);
	else
	    gr_rect(bgcol, IP_SOLID, pt);
    }

						/* draw the data	*/
    if ( color ) {
/* NOTE: The call below is commented out because it does a transform form
 * on the color data every time it is drawn.  The code in the color icon 
 * resource load should do all of the transforms.  Uncomment this line for
 * testing purposes only.
 */
/*      my_trans( pdata, pi->g_w/8, pdata,pi->g_w/8,pi->g_h );*/
	gsx_cblt(pdata, 0, 0, pi->g_w/8, 0x0L, pi->g_x, pi->g_y, 
		gl_width/8, pi->g_w, pi->g_h, S_OR_D,		/* 6/30/92 */
		color->num_planes); 
	if ( state & SELECTED ) {
	    tmp = fgcol;	
	    fgcol = bgcol;
	    bgcol = tmp;
	    if ( !col_select ) {	/* check if we need to darken */
		convert_mask( pmask, gl_colmask, pi->g_w, pi->g_h );
		gsx_blt(gl_colmask, 0, 0, pi->g_w/8, 0x0L, pi->g_x, pi->g_y, 
			gl_width/8, pi->g_w, pi->g_h, MD_TRANS,
			1, 0); 
	    }
	}
    } else 
	gsx_blt(pdata, 0, 0, pi->g_w/8, 0x0L, pi->g_x, pi->g_y, 
		gl_width/8, pi->g_w, pi->g_h, MD_TRANS,
		fgcol, bgcol); 

						/* draw the character	*/
    gsx_attr(TRUE, MD_TRANS, fgcol);
    if ( ch )
    {
	intin[0] = ch;
	gsx_tblt(SMALL, pi->g_x+chx, pi->g_y+chy, 1);
    }
						/* draw the label	*/
    gr_gtext(TE_CNTR, SMALL, ptext, pt, MD_TRANS);

}

/*	Takes the blit code and makes sure that the number of planes is
 *	set.  This code was taken from gsx_blt() and modified so that the
 *	number of planes is passed in and the source and destination MFDB's
 *	had that value set correctly.  Otherwise, it is the same code.
 */
	WORD
gsx_cblt(saddr, sx, sy, swb, daddr, dx, dy, dwb, w, h, rule, numplanes)
	LONG		saddr;
	REG UWORD		sx, sy, swb;
	LONG		daddr;
	REG UWORD		dx, dy;
	UWORD		dwb, w, h, rule;
	WORD		numplanes;
{
	WORD		*ppts;

	ppts = &ptsin[0];

	gsx_fix(&gl_src, saddr, swb, h);
	gsx_fix(&gl_dst, daddr, dwb, h);

	gl_src.fd_nplanes = numplanes;
	gl_dst.fd_nplanes = numplanes;

	gsx_moff();

	ppts[0] = sx;
	ppts[1] = sy;
	ppts[2] = sx + w - 1;
	ppts[3] = sy + h - 1;
	ppts[4] = dx;
	ppts[5] = dy;
	ppts[6] = dx + w - 1;
	ppts[7] = dy + h - 1 ;
	  vro_cpyfm( rule, &ppts[0], &gl_src, &gl_dst);
	gsx_mon();

}

/*	Takes a ptr to a mask and copies it to another while dithering
 *	the data.  Note that this does not check the limits of the gl_mask.
 */
convert_mask( mask, gl_mask, width, height )
WORD *mask, *gl_mask;
WORD width, height;
{
    int i, j, wdwide, no_bytes;

    wdwide = width/16;
    no_bytes = width/8 * height;
    for (i = 0; i < height; i+=2 ) {
	for ( j=0; j < wdwide; j++ ) {
	    gl_mask[ j + i*wdwide ] = mask[ j + i*wdwide ] & 0x5555;
	}
	for ( j=wdwide; j < 2*wdwide; j++ ) {
	    gl_mask[ j + i*wdwide ] = mask[ j + i*wdwide ] & 0xAAAA;
	}
    }
}


/* FIX_MONO()
 * Do fixups on the monochrome icon then pass back a ptr to the next part.
 */
WORD *
fix_mono( ptr, plane_size, tot_res )
WORD *ptr;
long *plane_size;
WORD *tot_res;
{
    long *temp;
    WORD width, height;
    long size;

    width = ptr[11];
    height = ptr[12];
    temp = &ptr[17];
    *tot_res = (WORD)*temp;
    *plane_size = size = (long) ((width/16) * height * 2);
    temp = &ptr[2];
    *temp = &ptr[19];	/* data */
    temp = &ptr[0];
    *temp = (long)&ptr[19] + size;
    temp = &ptr[4];
    *temp = (long)&ptr[19] + 2*size;
    temp = *temp + 12L;
    return( temp );    
}

/* FIX_RES()
 * Does fixups on the resolution dependent color icons.  Returns
 * a pointer past the last icon fixed up.
 */
WORD *
fix_res( ptr, mono_size, next_res )
WORD *ptr;
long mono_size;
long *next_res;
{
    long *temp, *end;
    WORD select;

    *next_res = &ptr[9];

    temp = &ptr[5];
    select = (int) *temp;
    temp = &ptr[1];
    *temp = (long) ptr + (long) sizeof( CICON );
    temp = &ptr[3];
    *temp = (long)ptr + (long) sizeof( CICON ) + ((long) ptr[0] * mono_size );
    end = *temp + mono_size;	/* push pointer past the mask */
    if ( select ) {	/* there are some selected icons */
	temp = &ptr[5];
	*temp = end;
	temp = &ptr[7];	/* selected mask */	
	end = (long *) ((long) end + ((long) ptr[0] * mono_size ));
	*temp = end;
	end = (long *) ((long) end + mono_size);
    }
    return( end );
}


/* FIXUP_CICON()
 * Does fixups on the pointers in the color icon structures.
 */
fixup_cicon( ptr, tot_icons, carray )
WORD *ptr;
int tot_icons;
CICONBLK **carray;
{
    int tot_resicons, tot_selicons;
    int i, j, k;
    long mono_size;	/* size of a single mono icon in bytes */
    long *next_res;
    CICONBLK *cicon;

    
    for ( i = 0; i < tot_icons; i++ ) {
	cicon = (CICONBLK *)ptr;
	carray[i] = cicon;
	ptr = fix_mono( ptr, &mono_size, &tot_resicons );
	if ( tot_resicons )	/* 7/9/92 */
	{
	  
	  cicon->mainlist = ptr;
	  for ( j = 0; j < tot_resicons; j++ ) {
	    ptr = fix_res( ptr, mono_size, &next_res );
	    *next_res = ptr;
	  }
	  *next_res = 0L;
	}
    }
}


/* GET_COLOR_RSC()
 * This is the main routine that fixes up the color icons.
 * Pass in a pointer to the array of CICONBLK's.  Count the number of 
 * entries (up until an entry has a -1L) to get the number of CICONBLK's.
 */
	
	VOID
get_color_rsc( cicondata )
	BYTE 	*cicondata;
{
	CICONBLK *ptr,**array_ptr;
	WORD 	totalicons;

	array_ptr = (CICONBLK **) cicondata;
	totalicons = 1;
	while (*array_ptr++ != -1L) 
	  totalicons++;

	ptr = (CICONBLK *) array_ptr;

	fixup_cicon( ptr, totalicons, (CICONBLK **)cicondata ); /* fixup pointers */
	trans_cicon( totalicons, (CICONBLK **)cicondata ); /* transform form */
}




/* MY_TRANS()
 * C code stolen from the apgsxif.s file.  This is call is identical to
 * gsx_trans except that gsx_trans is hardwired to one-plane transforms.
 * BUG FIX - pass in the number of planes instead of using the global
 *	dlf - 7/14/92
 */
	WORD
my_trans(saddr, swb, daddr, dwb, h, nplanes)
	LONG		saddr;
	UWORD		swb;
	LONG		daddr;
	UWORD		dwb;
	REG UWORD		h;
	UWORD		nplanes;
{
	gsx_fix(&gl_src, saddr, swb, h);
	gl_src.fd_stand = TRUE;
	gl_src.fd_nplanes = nplanes;

	gsx_fix(&gl_dst, daddr, dwb, h);
	gl_dst.fd_stand = FALSE;	/* 7/23/92 */
	gl_dst.fd_nplanes = nplanes;
	vrn_trnfm( &gl_src, &gl_dst );
}

/* TRANS_CICON()
 * Takes an array of color icons (and the number of icons), and changes
 * all of the color data from device-independent form to device-dependent.
 */
trans_cicon( tot_icons, carray )
int tot_icons;
CICONBLK **carray;
{
    int i;
    CICONBLK *ciconblk;
    CICON *cic;
    int w, h;

    for (i = 0; i < tot_icons; i++ ) {
	ciconblk = carray[i];
	w = ciconblk->monoblk.ib_wicon;
	h = ciconblk->monoblk.ib_hicon;
	cic = ciconblk->mainlist;
	while (cic) {
	    my_trans( cic->col_data, w/8, cic->col_data, w/8, h, 
		cic->num_planes );
	    if (cic->sel_data)
		my_trans( cic->sel_data, w/8, cic->sel_data, w/8, h,
			cic->num_planes );
	    cic = cic->next_res;
	}
    }
}

