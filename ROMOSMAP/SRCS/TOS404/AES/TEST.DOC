
/*
 * W_adjust() - adjust x, y, w and h of each component in the 
 *		given window with the window's x, y, w and h.
 */
VOID
w_adjust(wp, rect)
REG WINDOW  *wp;	/* pointer to window structure */
REG GRECT   *rect;	/* pointer to window's coords and dimensions */
{
    int		ulx;	    /* x offset from upper left corner */
    int		uly;	    /* y offset from upper left corner */
    int		urx;	    /* x offset from upper right corner */
    int		ury;	    /* y offset from upper right corner */
    int		llx;	    /* x offset from lower left corner */
    int		lly;	    /* y offset from lower left corner */
    int		lrx;	    /* x offset from lower right corner */
    int		lry;	    /* y offset from lower right corner */
    int		inx, iny;   /* x and y increments */
    int		blen;	    /* length of base bar */
    int		sz;	    /* slider size */
    int		w3dbox, h3dbox;

    /***
     *
     * In the old Window Library, after the first wm_open(), 
     * prev_xywh = curr_xywh = rect;
     *
     ***/

    /* init previous and current window dimensions */
    wp->prev = wp->curr;
    wp->curr = *rect;

    /* init dimensions of window background */
    w_obrect(wp, W_BOX, rect->g_x, rect->g_y, rect->g_w, rect->g_h);

    /* reinit work area if it is just a move */
    if (rect->g_w == wp->prev.g_w && rect->g_h == wp->prev.g_h) {
	/* initialize window work area */
	wp->obj[W_WORK].ob_x -= (wp->prev.g_x - rect->g_x);
	wp->obj[W_WORK].ob_y -= (wp->prev.g_y - rect->g_y);
	return;
    }

    /* init offsets from the four corners and the x and y increments */
    ulx = uly = urx = ury = llx = lly = lrx = lry = 0;
    w3dbox = gl_wbox + (ADJ3DPIX << 1);
    h3dbox = gl_hbox + (ADJ3DPIX << 1);

    inx = w3dbox;
    iny = h3dbox;

    if (wp->kind & TPARTS) {
	w_obrect(wp, W_TITLE, 0, 0, rect->g_w, h3dbox);
	uly = ury = iny;

	if (wp->kind & CLOSER) {
	    w_obrect(wp, W_CLOSER, ADJ3DPIX, ADJ3DPIX, gl_wbox, gl_hbox);
	    ulx = inx;
	}

	if (wp->kind & FULLER) 
	{
	    w_obrect(wp, W_FULLER, (rect->g_w-w3dbox+ADJ3DPIX), ADJ3DPIX, gl_wbox, 
		gl_hbox);
	    urx = inx;
	}

	if (wp->kind & NAME || wp->kind & MOVER) {
	    w_obrect(wp, W_NAME, (ulx+ADJ3DPIX), ADJ3DPIX, 
		(rect->g_w-ulx-urx-(ADJ3DPIX << 1)), gl_hbox);

	}
    }

    if (wp->kind & INFO) {
	w_obrect(wp, W_INFO, 0, uly, rect->g_w, gl_hbox);
	uly = ury += gl_hbox;
    }

    if (wp->kind & MNBAR) {
	w_obrect(wp, W_MNBAR, 0, uly, rect->g_w, h3dbox);
	uly = ury += iny;
    }

    urx = 0;	/* reinitialize upper right x offset */

    if ((hparts = wp->kind & HPARTS))
	lry = iny;
    if ((vparts = wp->kind & VPARTS))
	lrx = inx;

    if (wp->kind & SIZER) 
    {
	w_obrect(wp, W_SIZER, (rect->g_w-w3dbox+ADJ3DPIX), (rect->g_h-h3dbox+ADJ3DPIX),
		gl_wbox, gl_hbox);
	lry = iny;
	lrx = inx;

	if (!hparts && !vparts) 
	{
	    w_obrect(wp, W_VBAR, (rect->g_w-w3dbox), ury, w3dbox, 
		(rect->g_h-ury-lry));
	    urx = inx;
	}
    } 
    else
    {	 
	if (hparts && vparts)	/* if has horizontal or vertical parts ,we still need sizer */ 
	{
	  w_obrect(wp, W_SIZER, (rect->g_w-w3dbox+ADJ3DPIX), 
		(rect->g_h-h3dbox+ADJ3DPIX), gl_wbox, gl_hbox);
	  lry = iny;
	  lrx = inx;
	}
    }

    if (vparts) 
    {
	blen = rect->g_h - ury - lry;
	urx = inx;
	w_obrect(wp, W_VBAR, (rect->g_w-w3dbox), ury, w3dbox, blen);

	if (wp->kind & UPARROW) 
	{
	    w_obrect(wp, W_UPARROW, ADJ3DPIX, ADJ3DPIX, gl_wbox, gl_hbox);
	    ury += iny;
	}

	if (wp->kind & DNARROW) 
	{
	    w_obrect(wp, W_DNARROW, ADJ3DPIX, (blen-h3dbox+ADJ3DPIX-1), gl_wbox, 
		gl_hbox);
	    lry += iny;
	}

	if (wp->kind & VSLIDE) {
/*
	    sz = rect->g_h - ury - lry - (ADJ3DPIX << 1) - 1; 
	    w_obrect(wp, W_VSLIDE, 0, (ury-uly+1), w3dbox, sz);	
*/

	    sz = rect->g_h - ury - lry; 
	    w_obrect(wp, W_VSLIDE, 0, (ury-uly), w3dbox, sz);

	    /* Apr-21-92  ml. Use wp->hslsz to determine size of elevator */
	    if (wp->vslsz == -1)
	    {
	       w_obrect(wp, W_VELEV, ADJ3DPIX, ADJ3DPIX, gl_wbox, 
			gl_hbox - (ADJ3DPIX << 1) );
	    }
	    else
	    {
		sz = ( sz * wp->vslsz ) / 1000;
		if ( sz > ( ADJ3DPIX << 1 ) ) 	
		  sz = sz - (ADJ3DPIX << 1);
/*		w_obrect(wp, W_VELEV, ADJ3DPIX, ADJ3DPIX, gl_wbox, 
		    sz * wp->vslsz /1000);
*/
		w_obrect(wp, W_VELEV, ADJ3DPIX, ADJ3DPIX, gl_wbox, 
		    sz );
	    }
	}
    }


    if (hparts) {
	blen = rect->g_w - lrx;
	lly = iny;
	w_obrect(wp, W_HBAR, 0, (rect->g_h-h3dbox), blen, gl_hbox);

	if (wp->kind & LFARROW) {
	    w_obrect(wp, W_LFARROW, ADJ3DPIX, ADJ3DPIX, gl_wbox, gl_hbox);
	    llx = inx;
	}

	if (wp->kind & RTARROW) {
	    w_obrect(wp, W_RTARROW, (blen-w3dbox+ADJ3DPIX), ADJ3DPIX, gl_wbox, 
		gl_hbox);
	    lrx += inx;
	}

	if (wp->kind & HSLIDE) 
	{
/*
	    sz = rect->g_w - llx - lrx - (ADJ3DPIX << 1) - 1;
	    w_obrect(wp, W_HSLIDE, (llx+ADJ3DPIX), 0, sz, h3dbox);
*/

	    sz = rect->g_w - llx - lrx;
	    w_obrect(wp, W_HSLIDE, llx, 0, sz, h3dbox);

	    /* Apr-21-92  ml. Use wp->hslsz to determine size of elevator */
	    if (wp->hslsz == -1)
	    {	
	      w_obrect( wp, W_HELEV, ADJ3DPIX, ADJ3DPIX, 
			gl_wbox - (ADJ3DPIX << 1), gl_hbox );
	    } 	
	    else
	    {
/*		w_obrect(wp, W_HELEV, ADJ3DPIX, ADJ3DPIX, 
		    sz * wp->hslsz /1000, gl_hbox);
*/
		sz = sz * wp->hslsz / 1000;
			 
		if ( sz > ( ADJ3DPIX << 1 ) ) 	
		  sz = sz - (ADJ3DPIX << 1);

		w_obrect(wp, W_HELEV, ADJ3DPIX, ADJ3DPIX, sz, gl_hbox );
	    }
	}
    }

    /* initialize window work area */

    if ( !uly )	/* if no element */
      uly = 1;
    if ( !lly )
      lly = 1;
    if ( !urx )
      urx = 1;

    w_rect((GRECT *)&(wp->obj[W_WORK].ob_x), (rect->g_x+1), 
	    (rect->g_y+uly), (rect->g_w-urx-1), (rect->g_h-uly-lly));
}


