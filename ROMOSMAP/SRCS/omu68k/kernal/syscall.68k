******************************************************************************
*	System calls to OMU from C
******************************************************************************
*
*
*	called	-	syscall(no,arg1,arg2,arg3,arg4);

	globl	_syscall, _errno

_syscall:
	move.l	4(a7),d0	;Saves all arguments in
	movea.l	8(a7),a0	;apropriate registers
	move.l	12(a7),d1
	movea.l	16(a7),a1
	move.l	20(a7),d2
	trap	#0		;Does system call
	bcc noerr		;Checks if error
	move.l	d0,_errno	;Sets errno
	move.l	#-1,d0		;returns -1
noerr:
	rts			;Returns to calling program


******************************************************************************
* Switch process call to OMU from C
******************************************************************************
*
*	called -	swtch(proc);
*			proc = process table entry
*
	globl	_swtch

_swtch:
	move.l	4(a7),d0	;Saves Proc table pointer in d0
	trap	#1		;Does switch
	rts			;Returns to calling program

******************************************************************************
*	wait		Internal kernal wait system call
******************************************************************************
*
*	called -	wait(exit);
*			Sets *exit to exit status of child process
*
	globl	_wait

_wait:
	move.l	#7,d0		;Wait system call
	trap #0			;System call
	bcc noerrw		;Checks if error
	move.l	d0,_errno	;Sets errno
	move.l	#-1,d0		;returns -1
noerrw:
	movea.l	4(a7),a1	;Gets pointer to error status return address
	move.l	d1,(a1)		;Sets error status
	rts

******************************************************************************
*	fork		Internal kernal fork system call
******************************************************************************
*
*	called -	fork();
*			returns child pid to parent 0 to child
*
	globl	_fork

_fork:
	move.l	#2,d0		;fork system call
	trap #0			;System call
	bra	child		;Branch to child process
	bcc	parent		;Checks if error
	move.l	d0,_errno	;Sets errno if error and parent
	move.l	#-1,d0		;returns -1
	rts
parent:
	move.l	#0,d0
child:
	rts

******************************************************************************
*	execve		Internal kernal execve system call
******************************************************************************
*
*	called -	execve(name, argv, envp);
*
	globl	_execve

_execve:
	movea.l	4(a7),a0	;Saves all arguments in
	move.l	8(a7),d1	;apropriate registers
	movea.l	12(a7),a1
	move.l	#59,d0		;execve system call
	trap #0			;System call
	bcc	execok		;Checks if error
	move.l	d0,_errno	;Sets errno if error
	move.l	#-1,d0		;returns -1
execok:
	rts

