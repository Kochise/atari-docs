******************************************************************************
*	RDWRC.68k	Lowest level floppy disk read and write data
*			This version swaps bytes around for Codata type disks
******************************************************************************
*


* Addresses of Data REQ and Busy bits
DATA: = $F4007
CSR:  = $F4001
DATARDY: = 1
BUSY:    = 0

* DISK read write routines
* Codata C type link interface
* Arguments - <Address><Byte count>


*********************************************************************
* READ Sector	Requires no bytes to be even (swaps bytes in word)
*********************************************************************

 globl _r_sectc

_r_sectc:	
	movem.l a0-a2/d1-d3,-(sp)	;Saves registers used
	lea.l CSR,a1			;A1 points to the status register
	lea.l DATA,a2			;A2 points to the data register
	clr.l d0			;Sets D0 for exit with no errors
	move.l #BUSY,d1			;D1 is Busy bit no in status
	move.l #DATARDY,d2		;D2 is Data ready bit no in status
	move.l 32(a7),d3		;Gets byte count from stack (C passed)
	movea.l 28(a7),a0		;Gets address freom stack (C passed)
	addq.l #2,a0			;Offsets address to 1 plus position
rloop:	
	btst.b d2,(a1)			;Checks if data ready
	beq rwait			;If not jumps
	move.b (a2),-(a0)		;Gets data and puts to address required
	subq.w #1,d3			;Decrements byte counter
	beq rend			;If zero jumps to end
	btst.b #0,d3			;Tests if counter is even
	bne rwait			;Jumps if count is odd
	addq.l #4,a0			;Sets a0 to end of next word
rwait:	
	btst.b d1,(a1)			;Tests if fdc is busy
	bne rloop			;If not carries on around the loop
	move.b CSR,d0			;Gets information from status on error
	ext.w d0			;Extends to word form
rend:
	movem.l (sp)+,a0-a2/d1-d3	;Recovers registers
	rts				;Returns



*********************************************************************
* WRITE Sector	Requires no of bytes to be even (swaps bytes in word)
*********************************************************************

	globl _w_sectc

_w_sectc:	
	movem.l a0-a2/d1-d3,-(sp)	;Saves registers used
	lea.l CSR,a1			;A1 points to the status register
	lea.l DATA,a2			;A2 points to the data register
	clr.l d0			;Sets D0 for exit with no errors
	move.l #BUSY,d1			;D1 is Busy bit no in status
	move.l #DATARDY,d2		;D2 is Data ready bit no in status
	move.l 32(a7),d3		;Gets byte count from stack (C passed)
	movea.l 28(a7),a0		;Gets address freom stack (C passed)
	addq.l #2,a0			;Offsets address to 1 plus position
wloop:	
	btst.b d2,(a1)			;Test data ready status bit
	beq wwait			;If not ready jump
	move.b -(a0),(a2)		;Gets data and outputs to floppy
	subq.w #1,d3			;Decrements address counter
	beq wend 
	btst.b #0,d3			;Tests if counter is even
	bne wwait			;Jumps if count is odd
	addq.l #4,a0			;Sets a0 to end of next word
wwait:	
	btst.b d1,(a1)			;Tests if fdc is busy
	bne wloop			;If not carries on around the loop
	move.b CSR,d0			;Gets information from status on error
	ext.w d0			;Extends to word form
wend:
	movem.l (sp)+,a0-a2/d1-d3	;Recovers registers
	rts				;Returns



*********************************************************************
* RAW READ Sector
*********************************************************************

	globl _raw_read

_raw_read:	
	movem.l a0-a2/d1-d3,-(sp)
	movea.l 28(a7),a0
	lea.l CSR,a1
	lea.l DATA,a2
	move.l #BUSY,d1
	move.l #DATARDY,d2
Z18:	
	btst.b d2,(a1)
	beq Z19
	move.b (a2),(a0)+
	bra Z18
Z19:
	btst.b d1,(a1)
	bne Z18
	move.b CSR,d0			;Gets information from status on error
	ext.w d0			;Extends to word form
	movem.l (sp)+,a0-a2/d1-d3
	rts



*********************************************************************
* RAW WRITE Sector
*********************************************************************

	globl _raw_write

_raw_write:	
	movem.l a0-a2/d1-d3,-(sp)
	movea.l 28(a7),a0
	lea.l CSR,a1
	lea.l DATA,a2
	move.l #BUSY,d1
	move.l #DATARDY,d2
Z23:	
	btst.b d2,(a1)
	beq Z24
	move.b (a0)+,(a2)
	bra Z23
Z24:
	btst.b d1,(a1)
	bne Z23
	move.b CSR,d0			;Gets information from status on error
	ext.w d0			;Extends to word form
	movem.l (sp)+,a0-a2/d1-d3
	rts
