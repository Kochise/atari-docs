SETTER.TTP
**********

The small ASCII-files containing the configuration of many programs I
don't like. These files have the advantage of an easy changability by
using a text editor but the disadvantage of laying around in the
directory and being not on the right place.

That's why I placed the configuration direct in the program. I added a
short explanaition to every point. These explainations don't stay
resident in my resident programs, no problem for an assembler programmer.
The configuration of such programs is changed by using SETTER which reads
the information and explaination and saves the configuration in the
program again.


Usage
-----

From TOS1.04 up the use of SETTER is simple: Take the program to modify
with the mouse and drag it on SETTER.TTP. SETTER will start, load the
programm and start the configuration dialog or give a message, that
configuration is impossible because the program doesn't contain any
settings. For older versions of TOS: doubleclick SETTER.TTP and enter the
name and path of the program in the appearing dialog box. SETTER
recognizes with high safety whether the program contains a settings.

SETTER displays one setting after the other and waits for a new value for
this setting. After every input the Return key has to pressed. The last
question of SETTER is whether or not to save the changes.

SETTER gives some error messages if errors occur.

SETTER displays _its_ messages in German and English. The explainations
in the programs SETTER displays only in the language in which they are.


Copyright
---------

SETTER.TTP may be freely copied together with this text. The C-source may
only be copied together with SETTER.TTP and SETTER.TXT.

Certainly anything that happens (or doesn't) by the usage of SETTER.* is at your
own risk.

Maybe others (e.g. coders) think SETTER ist useful. Well, you may use it, but:
If anyone releases an enhanced version of SETTER he has to follow these rules:
- it must be freely distributeable too.
- it must be noted that it is free and made by you, not me.
- send me a mail (or better a copy of the program) - but don't let me cost that
  anything

I don't like my specifications changed. Enhancements are allowed, but don't
change existing commands!

A big hello to Wolfgang Wander - without him, who debugged this C-coding attempt
of mine, I should have written it again - in assembly).

'Me' is:
Harun Scheutzow
You can contact me as follows:
Internet: Harun_Scheutzow@b.maus.de
MausNet:  Harun Scheutzow @ B
SnailMail: Harun Scheutzow
           Dresdener Strasse 83
         D-10179 Berlin
           Germany

You use SETTER on your own risk!

GEM-Version of SETTER
---------------------

To create it faster and smaller I coded SETTER as TTP. Markus Kohm thought
SETTER is a good idea and made a GEM-version having some more functions. This
program is available from several BBS's. Search for SETTER.ZIP, e.g. in Maus KR.
Actual dates of this BBS are:
Phone number: 0721-358887
Access times: 8am to 6pm and
              8pm to 3am
You can contact Markus at the following (Internet) address:
Markus_Kohm@kr2.maus.de

Anyone planning to write other SETTER versions or needs more filetypes should
take a look at this program first.

Versions
--------

At startup SETTER will print the date of creation as yyyy-mm-dd and - I hope so
- have more functions and less bugs.

1993-11-27  String input implemented
1994-01-09  Inclusion of English output, minimum bugfixes
1994-05-07  Now runs with TOS 4.xx (Falcon)


(People only using this package need to don't read on)
Specifications for saving of editeable informations in programs
---------------------------------------------------------------

Harun Scheutzow, Nov. 21st, 1994

Modification is made by a SETTER .TTP, wich edits the program where are changes
to be made in.

The zero-terminated string 'hAruNs cONfigER' can be found on an even address in
the TEXT- or DATA-segment. It's length is - with the 0-byte - exactly 16 chars.
Behind it is a LONG-pointer to the string's beginning.
This looks - in assembly - like this:

      .even
hkbg:
      .dc.b "hAruNs cONfigER",0
      .dc.l hkbg

After that the objects (made of text to be printed, config and place for config)
can be found as a list.

The text to be printed is a C-string (this means 0-terminated) and filled with a
0-byte to the next even address if needed. An empty string (only 0-bytes) shows
the object's list end.

The command for configuration is a WORD (16bit). It's values in the highbyte
are:

0
Yes/No-setup: The following WORD will be set to $FFFF for yes and $0000 for no.

1
List for a LONG-input: The number of elements in the list stand in the lowbyte.
The LONGS after that will be set to the 32bit integer given to input. If a
place is invalid the value is $80000000.

2
String-input: The maximum length of the input string (including the 0byte at the
and) stands in the lowbyte. This lenght has to be even. The string given to
input is put right after this and will be filled to maximum with 0bytes.

---EOF---