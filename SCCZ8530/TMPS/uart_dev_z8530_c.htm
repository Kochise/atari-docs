<!doctype html public "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
<title>sys/dev/uart/uart_dev_z8530.c</title>
<base href="http://fxr.watson.org/fxr/">
</head>

<body bgcolor=white>
<div align=center>
   ~ <b>[</b>&nbsp;<b><i>source navigation</i></b>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="diff/dev/uart/uart_dev_z8530.c">diff markup</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="ident">identifier search</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="search">freetext search</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="find">file search</a>&nbsp;<b>]</b> ~
</div>

<h1 align=center>
  FreeBSD/Linux Kernel Cross Reference
<!--  <a href="http:blurb.html">
    Cross Reference</a>--><br>
  <a href="source/">sys</a>/<a href="source/dev/">dev</a>/<a href="source/dev/uart/">uart</a>/<a href="source/dev/uart/uart_dev_z8530.c">uart_dev_z8530.c</a>
</h1>

<div align=center>
  
  <b>Version:</b>
   ~ <b>[</b>&nbsp;<b><i>HEAD</i></b>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=RELENG52">RELENG52</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=RELENG51">RELENG51</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=RELENG50">RELENG50</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=RELENG49">RELENG49</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=RELENG4">RELENG4</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=RELENG3">RELENG3</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=linux-2.4.22">linux-2.4.22</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=linux-2.6.0">linux-2.6.0</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=linux-2.6.1">linux-2.6.1</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=DFBSD">DFBSD</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=NETBSD">NETBSD</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=OPENBSD">OPENBSD</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=DARWIN7">DARWIN7</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=OPENDARWIN">OPENDARWIN</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=TRUSTEDBSD-MAC">TRUSTEDBSD-MAC</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=TRUSTEDBSD-CAP">TRUSTEDBSD-CAP</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=TRUSTEDBSD-SEBSD">TRUSTEDBSD-SEBSD</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=TRUSTEDBSD-SEDARWIN">TRUSTEDBSD-SEDARWIN</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=netperf-socket">netperf-socket</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=rwatson-netperf">rwatson-netperf</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="source/dev/uart/uart_dev_z8530.c?v=TRUSTEDBSD-SEDARWIN73">TRUSTEDBSD-SEDARWIN73</a>&nbsp;<b>]</b> ~
  <br>
</div>
<hr>
<pre>  <a name=L1 href="source/dev/uart/uart_dev_z8530.c#L1">1</a> <b><i>/*</i></b>
  <a name=L2 href="source/dev/uart/uart_dev_z8530.c#L2">2</a> <b><i> * Copyright (c) 2003 Marcel Moolenaar</i></b>
  <a name=L3 href="source/dev/uart/uart_dev_z8530.c#L3">3</a> <b><i> * All rights reserved.</i></b>
  <a name=L4 href="source/dev/uart/uart_dev_z8530.c#L4">4</a> <b><i> *</i></b>
  <a name=L5 href="source/dev/uart/uart_dev_z8530.c#L5">5</a> <b><i> * Redistribution and use in source and binary forms, with or without</i></b>
  <a name=L6 href="source/dev/uart/uart_dev_z8530.c#L6">6</a> <b><i> * modification, are permitted provided that the following conditions</i></b>
  <a name=L7 href="source/dev/uart/uart_dev_z8530.c#L7">7</a> <b><i> * are met:</i></b>
  <a name=L8 href="source/dev/uart/uart_dev_z8530.c#L8">8</a> <b><i> *</i></b>
  <a name=L9 href="source/dev/uart/uart_dev_z8530.c#L9">9</a> <b><i> * 1. Redistributions of source code must retain the above copyright</i></b>
 <a name=L10 href="source/dev/uart/uart_dev_z8530.c#L10">10</a> <b><i> *    notice, this list of conditions and the following disclaimer.</i></b>
 <a name=L11 href="source/dev/uart/uart_dev_z8530.c#L11">11</a> <b><i> * 2. Redistributions in binary form must reproduce the above copyright</i></b>
 <a name=L12 href="source/dev/uart/uart_dev_z8530.c#L12">12</a> <b><i> *    notice, this list of conditions and the following disclaimer in the</i></b>
 <a name=L13 href="source/dev/uart/uart_dev_z8530.c#L13">13</a> <b><i> *    documentation and/or other materials provided with the distribution.</i></b>
 <a name=L14 href="source/dev/uart/uart_dev_z8530.c#L14">14</a> <b><i> *</i></b>
 <a name=L15 href="source/dev/uart/uart_dev_z8530.c#L15">15</a> <b><i> * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR</i></b>
 <a name=L16 href="source/dev/uart/uart_dev_z8530.c#L16">16</a> <b><i> * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</i></b>
 <a name=L17 href="source/dev/uart/uart_dev_z8530.c#L17">17</a> <b><i> * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.</i></b>
 <a name=L18 href="source/dev/uart/uart_dev_z8530.c#L18">18</a> <b><i> * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,</i></b>
 <a name=L19 href="source/dev/uart/uart_dev_z8530.c#L19">19</a> <b><i> * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT</i></b>
 <a name=L20 href="source/dev/uart/uart_dev_z8530.c#L20">20</a> <b><i> * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</i></b>
 <a name=L21 href="source/dev/uart/uart_dev_z8530.c#L21">21</a> <b><i> * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</i></b>
 <a name=L22 href="source/dev/uart/uart_dev_z8530.c#L22">22</a> <b><i> * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</i></b>
 <a name=L23 href="source/dev/uart/uart_dev_z8530.c#L23">23</a> <b><i> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF</i></b>
 <a name=L24 href="source/dev/uart/uart_dev_z8530.c#L24">24</a> <b><i> * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</i></b>
 <a name=L25 href="source/dev/uart/uart_dev_z8530.c#L25">25</a> <b><i> */</i></b>
 <a name=L26 href="source/dev/uart/uart_dev_z8530.c#L26">26</a> 
 <a name=L27 href="source/dev/uart/uart_dev_z8530.c#L27">27</a> #include &lt;sys/cdefs.h&gt;
 <a name=L28 href="source/dev/uart/uart_dev_z8530.c#L28">28</a> <a href="ident?i=__FBSDID">__FBSDID</a>(<i>"$FreeBSD: src/sys/dev/uart/uart_dev_z8530.c,v 1.8 2004/06/24 10:07:28 phk Exp $"</i>);
 <a name=L29 href="source/dev/uart/uart_dev_z8530.c#L29">29</a> 
 <a name=L30 href="source/dev/uart/uart_dev_z8530.c#L30">30</a> #include &lt;sys/param.h&gt;
 <a name=L31 href="source/dev/uart/uart_dev_z8530.c#L31">31</a> #include &lt;sys/systm.h&gt;
 <a name=L32 href="source/dev/uart/uart_dev_z8530.c#L32">32</a> #include &lt;sys/bus.h&gt;
 <a name=L33 href="source/dev/uart/uart_dev_z8530.c#L33">33</a> #include &lt;sys/conf.h&gt;
 <a name=L34 href="source/dev/uart/uart_dev_z8530.c#L34">34</a> #include &lt;machine/bus.h&gt;
 <a name=L35 href="source/dev/uart/uart_dev_z8530.c#L35">35</a> 
 <a name=L36 href="source/dev/uart/uart_dev_z8530.c#L36">36</a> #include &lt;dev/uart/uart.h&gt;
 <a name=L37 href="source/dev/uart/uart_dev_z8530.c#L37">37</a> #include &lt;dev/uart/uart_cpu.h&gt;
 <a name=L38 href="source/dev/uart/uart_dev_z8530.c#L38">38</a> #include &lt;dev/uart/uart_bus.h&gt;
 <a name=L39 href="source/dev/uart/uart_dev_z8530.c#L39">39</a> #include &lt;dev/uart/uart_dev_z8530.h&gt;
 <a name=L40 href="source/dev/uart/uart_dev_z8530.c#L40">40</a> 
 <a name=L41 href="source/dev/uart/uart_dev_z8530.c#L41">41</a> #include "<a href="source/dev/uart/uart_if.h">uart_if.h</a>"
 <a name=L42 href="source/dev/uart/uart_dev_z8530.c#L42">42</a> 
 <a name=L43 href="source/dev/uart/uart_dev_z8530.c#L43">43</a> #define <a href="ident?i=DEFAULT_RCLK">DEFAULT_RCLK</a>    307200
 <a name=L44 href="source/dev/uart/uart_dev_z8530.c#L44">44</a> 
 <a name=L45 href="source/dev/uart/uart_dev_z8530.c#L45">45</a> <b><i>/* Multiplexed I/O. */</i></b>
 <a name=L46 href="source/dev/uart/uart_dev_z8530.c#L46">46</a> static <a href="ident?i=__inline">__inline</a> void
 <a name=L47 href="source/dev/uart/uart_dev_z8530.c#L47">47</a> <a href="ident?i=uart_setmreg">uart_setmreg</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int <a href="ident?i=reg">reg</a>, int <a href="ident?i=val">val</a>)
 <a name=L48 href="source/dev/uart/uart_dev_z8530.c#L48">48</a> {
 <a name=L49 href="source/dev/uart/uart_dev_z8530.c#L49">49</a> 
 <a name=L50 href="source/dev/uart/uart_dev_z8530.c#L50">50</a>         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=reg">reg</a>);
 <a name=L51 href="source/dev/uart/uart_dev_z8530.c#L51">51</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
 <a name=L52 href="source/dev/uart/uart_dev_z8530.c#L52">52</a>         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=val">val</a>);
 <a name=L53 href="source/dev/uart/uart_dev_z8530.c#L53">53</a> }
 <a name=L54 href="source/dev/uart/uart_dev_z8530.c#L54">54</a> 
 <a name=L55 href="source/dev/uart/uart_dev_z8530.c#L55">55</a> static <a href="ident?i=__inline">__inline</a> <a href="ident?i=uint8_t">uint8_t</a>
 <a name=L56 href="source/dev/uart/uart_dev_z8530.c#L56">56</a> <a href="ident?i=uart_getmreg">uart_getmreg</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int <a href="ident?i=reg">reg</a>)
 <a name=L57 href="source/dev/uart/uart_dev_z8530.c#L57">57</a> {
 <a name=L58 href="source/dev/uart/uart_dev_z8530.c#L58">58</a> 
 <a name=L59 href="source/dev/uart/uart_dev_z8530.c#L59">59</a>         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=reg">reg</a>);
 <a name=L60 href="source/dev/uart/uart_dev_z8530.c#L60">60</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
 <a name=L61 href="source/dev/uart/uart_dev_z8530.c#L61">61</a>         return (<a href="ident?i=uart_getreg">uart_getreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>));
 <a name=L62 href="source/dev/uart/uart_dev_z8530.c#L62">62</a> }
 <a name=L63 href="source/dev/uart/uart_dev_z8530.c#L63">63</a> 
 <a name=L64 href="source/dev/uart/uart_dev_z8530.c#L64">64</a> static int
 <a name=L65 href="source/dev/uart/uart_dev_z8530.c#L65">65</a> <a href="ident?i=z8530_divisor">z8530_divisor</a>(int <a href="ident?i=rclk">rclk</a>, int baudrate)
 <a name=L66 href="source/dev/uart/uart_dev_z8530.c#L66">66</a> {
 <a name=L67 href="source/dev/uart/uart_dev_z8530.c#L67">67</a>         int act_baud, divisor, <a href="ident?i=error">error</a>;
 <a name=L68 href="source/dev/uart/uart_dev_z8530.c#L68">68</a> 
 <a name=L69 href="source/dev/uart/uart_dev_z8530.c#L69">69</a>         if (baudrate == 0)
 <a name=L70 href="source/dev/uart/uart_dev_z8530.c#L70">70</a>                 return (0);
 <a name=L71 href="source/dev/uart/uart_dev_z8530.c#L71">71</a> 
 <a name=L72 href="source/dev/uart/uart_dev_z8530.c#L72">72</a>         divisor = (<a href="ident?i=rclk">rclk</a> + baudrate) / (baudrate &lt;&lt; 1) - 2;
 <a name=L73 href="source/dev/uart/uart_dev_z8530.c#L73">73</a>         if (divisor &gt;= 65536)
 <a name=L74 href="source/dev/uart/uart_dev_z8530.c#L74">74</a>                 return (0);
 <a name=L75 href="source/dev/uart/uart_dev_z8530.c#L75">75</a>         act_baud = <a href="ident?i=rclk">rclk</a> / 2 / (divisor + 2);
 <a name=L76 href="source/dev/uart/uart_dev_z8530.c#L76">76</a> 
 <a name=L77 href="source/dev/uart/uart_dev_z8530.c#L77">77</a>         <b><i>/* 10 times error in percent: */</i></b>
 <a name=L78 href="source/dev/uart/uart_dev_z8530.c#L78">78</a>         <a href="ident?i=error">error</a> = ((act_baud - baudrate) * 2000 / baudrate + 1) &gt;&gt; 1;
 <a name=L79 href="source/dev/uart/uart_dev_z8530.c#L79">79</a> 
 <a name=L80 href="source/dev/uart/uart_dev_z8530.c#L80">80</a>         <b><i>/* 3.0% maximum error tolerance: */</i></b>
 <a name=L81 href="source/dev/uart/uart_dev_z8530.c#L81">81</a>         if (<a href="ident?i=error">error</a> &lt; -30 || <a href="ident?i=error">error</a> &gt; 30)
 <a name=L82 href="source/dev/uart/uart_dev_z8530.c#L82">82</a>                 return (0);
 <a name=L83 href="source/dev/uart/uart_dev_z8530.c#L83">83</a> 
 <a name=L84 href="source/dev/uart/uart_dev_z8530.c#L84">84</a>         return (divisor);
 <a name=L85 href="source/dev/uart/uart_dev_z8530.c#L85">85</a> }
 <a name=L86 href="source/dev/uart/uart_dev_z8530.c#L86">86</a> 
 <a name=L87 href="source/dev/uart/uart_dev_z8530.c#L87">87</a> static int
 <a name=L88 href="source/dev/uart/uart_dev_z8530.c#L88">88</a> <a href="ident?i=z8530_param">z8530_param</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int baudrate, int databits, int stopbits,
 <a name=L89 href="source/dev/uart/uart_dev_z8530.c#L89">89</a>     int <a href="ident?i=parity">parity</a>, <a href="ident?i=uint8_t">uint8_t</a> *tpcp)
 <a name=L90 href="source/dev/uart/uart_dev_z8530.c#L90">90</a> {
 <a name=L91 href="source/dev/uart/uart_dev_z8530.c#L91">91</a>         int divisor;
 <a name=L92 href="source/dev/uart/uart_dev_z8530.c#L92">92</a>         <a href="ident?i=uint8_t">uint8_t</a> mpm, <a href="ident?i=rpc">rpc</a>, tpc;
 <a name=L93 href="source/dev/uart/uart_dev_z8530.c#L93">93</a> 
 <a name=L94 href="source/dev/uart/uart_dev_z8530.c#L94">94</a>         <a href="ident?i=rpc">rpc</a> = <a href="ident?i=RPC_RXE">RPC_RXE</a>;
 <a name=L95 href="source/dev/uart/uart_dev_z8530.c#L95">95</a>         mpm = <a href="ident?i=MPM_CM16">MPM_CM16</a>;
 <a name=L96 href="source/dev/uart/uart_dev_z8530.c#L96">96</a>         tpc = <a href="ident?i=TPC_TXE">TPC_TXE</a> | (*tpcp &amp; (<a href="ident?i=TPC_DTR">TPC_DTR</a> | <a href="ident?i=TPC_RTS">TPC_RTS</a>));
 <a name=L97 href="source/dev/uart/uart_dev_z8530.c#L97">97</a> 
 <a name=L98 href="source/dev/uart/uart_dev_z8530.c#L98">98</a>         if (databits &gt;= 8) {
 <a name=L99 href="source/dev/uart/uart_dev_z8530.c#L99">99</a>                 <a href="ident?i=rpc">rpc</a> |= <a href="ident?i=RPC_RB8">RPC_RB8</a>;
<a name=L100 href="source/dev/uart/uart_dev_z8530.c#L100">100</a>                 tpc |= <a href="ident?i=TPC_TB8">TPC_TB8</a>;
<a name=L101 href="source/dev/uart/uart_dev_z8530.c#L101">101</a>         } else if (databits == 7) {
<a name=L102 href="source/dev/uart/uart_dev_z8530.c#L102">102</a>                 <a href="ident?i=rpc">rpc</a> |= <a href="ident?i=RPC_RB7">RPC_RB7</a>;
<a name=L103 href="source/dev/uart/uart_dev_z8530.c#L103">103</a>                 tpc |= <a href="ident?i=TPC_TB7">TPC_TB7</a>;
<a name=L104 href="source/dev/uart/uart_dev_z8530.c#L104">104</a>         } else if (databits == 6) {
<a name=L105 href="source/dev/uart/uart_dev_z8530.c#L105">105</a>                 <a href="ident?i=rpc">rpc</a> |= <a href="ident?i=RPC_RB6">RPC_RB6</a>;
<a name=L106 href="source/dev/uart/uart_dev_z8530.c#L106">106</a>                 tpc |= <a href="ident?i=TPC_TB6">TPC_TB6</a>;
<a name=L107 href="source/dev/uart/uart_dev_z8530.c#L107">107</a>         } else {
<a name=L108 href="source/dev/uart/uart_dev_z8530.c#L108">108</a>                 <a href="ident?i=rpc">rpc</a> |= <a href="ident?i=RPC_RB5">RPC_RB5</a>;
<a name=L109 href="source/dev/uart/uart_dev_z8530.c#L109">109</a>                 tpc |= <a href="ident?i=TPC_TB5">TPC_TB5</a>;
<a name=L110 href="source/dev/uart/uart_dev_z8530.c#L110">110</a>         }
<a name=L111 href="source/dev/uart/uart_dev_z8530.c#L111">111</a>         mpm |= (stopbits &gt; 1) ? <a href="ident?i=MPM_SB2">MPM_SB2</a> : <a href="ident?i=MPM_SB1">MPM_SB1</a>;
<a name=L112 href="source/dev/uart/uart_dev_z8530.c#L112">112</a>         switch (<a href="ident?i=parity">parity</a>) {
<a name=L113 href="source/dev/uart/uart_dev_z8530.c#L113">113</a>         case <a href="ident?i=UART_PARITY_EVEN">UART_PARITY_EVEN</a>:  mpm |= <a href="ident?i=MPM_PE">MPM_PE</a> | <a href="ident?i=MPM_EVEN">MPM_EVEN</a>; break;
<a name=L114 href="source/dev/uart/uart_dev_z8530.c#L114">114</a>         case <a href="ident?i=UART_PARITY_NONE">UART_PARITY_NONE</a>:  break;
<a name=L115 href="source/dev/uart/uart_dev_z8530.c#L115">115</a>         case <a href="ident?i=UART_PARITY_ODD">UART_PARITY_ODD</a>:   mpm |= <a href="ident?i=MPM_PE">MPM_PE</a>; break;
<a name=L116 href="source/dev/uart/uart_dev_z8530.c#L116">116</a>         default:                return (<a href="ident?i=EINVAL">EINVAL</a>);
<a name=L117 href="source/dev/uart/uart_dev_z8530.c#L117">117</a>         }
<a name=L118 href="source/dev/uart/uart_dev_z8530.c#L118">118</a> 
<a name=L119 href="source/dev/uart/uart_dev_z8530.c#L119">119</a>         <b><i>/* Set baudrate. */</i></b>
<a name=L120 href="source/dev/uart/uart_dev_z8530.c#L120">120</a>         if (baudrate &gt; 0) {
<a name=L121 href="source/dev/uart/uart_dev_z8530.c#L121">121</a>                 divisor = <a href="ident?i=z8530_divisor">z8530_divisor</a>(bas-&gt;<a href="ident?i=rclk">rclk</a>, baudrate);
<a name=L122 href="source/dev/uart/uart_dev_z8530.c#L122">122</a>                 if (divisor == 0)
<a name=L123 href="source/dev/uart/uart_dev_z8530.c#L123">123</a>                         return (<a href="ident?i=EINVAL">EINVAL</a>);
<a name=L124 href="source/dev/uart/uart_dev_z8530.c#L124">124</a>                 <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_TCL">WR_TCL</a>, divisor &amp; 0xff);
<a name=L125 href="source/dev/uart/uart_dev_z8530.c#L125">125</a>                 <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L126 href="source/dev/uart/uart_dev_z8530.c#L126">126</a>                 <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_TCH">WR_TCH</a>, (divisor &gt;&gt; 8) &amp; 0xff);
<a name=L127 href="source/dev/uart/uart_dev_z8530.c#L127">127</a>                 <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L128 href="source/dev/uart/uart_dev_z8530.c#L128">128</a>         }
<a name=L129 href="source/dev/uart/uart_dev_z8530.c#L129">129</a> 
<a name=L130 href="source/dev/uart/uart_dev_z8530.c#L130">130</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_RPC">WR_RPC</a>, <a href="ident?i=rpc">rpc</a>);
<a name=L131 href="source/dev/uart/uart_dev_z8530.c#L131">131</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L132 href="source/dev/uart/uart_dev_z8530.c#L132">132</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_MPM">WR_MPM</a>, mpm);
<a name=L133 href="source/dev/uart/uart_dev_z8530.c#L133">133</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L134 href="source/dev/uart/uart_dev_z8530.c#L134">134</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_TPC">WR_TPC</a>, tpc);
<a name=L135 href="source/dev/uart/uart_dev_z8530.c#L135">135</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L136 href="source/dev/uart/uart_dev_z8530.c#L136">136</a>         *tpcp = tpc;
<a name=L137 href="source/dev/uart/uart_dev_z8530.c#L137">137</a>         return (0);
<a name=L138 href="source/dev/uart/uart_dev_z8530.c#L138">138</a> }
<a name=L139 href="source/dev/uart/uart_dev_z8530.c#L139">139</a> 
<a name=L140 href="source/dev/uart/uart_dev_z8530.c#L140">140</a> static int
<a name=L141 href="source/dev/uart/uart_dev_z8530.c#L141">141</a> <a href="ident?i=z8530_setup">z8530_setup</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int baudrate, int databits, int stopbits,
<a name=L142 href="source/dev/uart/uart_dev_z8530.c#L142">142</a>     int <a href="ident?i=parity">parity</a>)
<a name=L143 href="source/dev/uart/uart_dev_z8530.c#L143">143</a> {
<a name=L144 href="source/dev/uart/uart_dev_z8530.c#L144">144</a>         <a href="ident?i=uint8_t">uint8_t</a> mic, tpc;
<a name=L145 href="source/dev/uart/uart_dev_z8530.c#L145">145</a> 
<a name=L146 href="source/dev/uart/uart_dev_z8530.c#L146">146</a>         if (bas-&gt;<a href="ident?i=rclk">rclk</a> == 0)
<a name=L147 href="source/dev/uart/uart_dev_z8530.c#L147">147</a>                 bas-&gt;<a href="ident?i=rclk">rclk</a> = <a href="ident?i=DEFAULT_RCLK">DEFAULT_RCLK</a>;
<a name=L148 href="source/dev/uart/uart_dev_z8530.c#L148">148</a> 
<a name=L149 href="source/dev/uart/uart_dev_z8530.c#L149">149</a>         <b><i>/* Assume we don't need to perform a full hardware reset. */</i></b>
<a name=L150 href="source/dev/uart/uart_dev_z8530.c#L150">150</a>         mic = <a href="ident?i=MIC_MIE">MIC_MIE</a> | <a href="ident?i=MIC_NV">MIC_NV</a>;
<a name=L151 href="source/dev/uart/uart_dev_z8530.c#L151">151</a>         switch (bas-&gt;<a href="ident?i=chan">chan</a>) {
<a name=L152 href="source/dev/uart/uart_dev_z8530.c#L152">152</a>         case 1:
<a name=L153 href="source/dev/uart/uart_dev_z8530.c#L153">153</a>                 mic |= <a href="ident?i=MIC_CRA">MIC_CRA</a>;
<a name=L154 href="source/dev/uart/uart_dev_z8530.c#L154">154</a>                 break;
<a name=L155 href="source/dev/uart/uart_dev_z8530.c#L155">155</a>         case 2:
<a name=L156 href="source/dev/uart/uart_dev_z8530.c#L156">156</a>                 mic |= <a href="ident?i=MIC_CRB">MIC_CRB</a>;
<a name=L157 href="source/dev/uart/uart_dev_z8530.c#L157">157</a>                 break;
<a name=L158 href="source/dev/uart/uart_dev_z8530.c#L158">158</a>         }
<a name=L159 href="source/dev/uart/uart_dev_z8530.c#L159">159</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_MIC">WR_MIC</a>, mic);
<a name=L160 href="source/dev/uart/uart_dev_z8530.c#L160">160</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L161 href="source/dev/uart/uart_dev_z8530.c#L161">161</a>         <b><i>/* Set clock sources and enable BRG. */</i></b>
<a name=L162 href="source/dev/uart/uart_dev_z8530.c#L162">162</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_CMC">WR_CMC</a>, <a href="ident?i=CMC_RC_BRG">CMC_RC_BRG</a> | <a href="ident?i=CMC_TC_BRG">CMC_TC_BRG</a>);
<a name=L163 href="source/dev/uart/uart_dev_z8530.c#L163">163</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_MCB2">WR_MCB2</a>, <a href="ident?i=MCB2_PCLK">MCB2_PCLK</a> | <a href="ident?i=MCB2_BRGE">MCB2_BRGE</a>);
<a name=L164 href="source/dev/uart/uart_dev_z8530.c#L164">164</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L165 href="source/dev/uart/uart_dev_z8530.c#L165">165</a>         <b><i>/* Set data encoding. */</i></b>
<a name=L166 href="source/dev/uart/uart_dev_z8530.c#L166">166</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_MCB1">WR_MCB1</a>, <a href="ident?i=MCB1_NRZ">MCB1_NRZ</a>);
<a name=L167 href="source/dev/uart/uart_dev_z8530.c#L167">167</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L168 href="source/dev/uart/uart_dev_z8530.c#L168">168</a> 
<a name=L169 href="source/dev/uart/uart_dev_z8530.c#L169">169</a>         tpc = <a href="ident?i=TPC_DTR">TPC_DTR</a> | <a href="ident?i=TPC_RTS">TPC_RTS</a>;
<a name=L170 href="source/dev/uart/uart_dev_z8530.c#L170">170</a>         <a href="ident?i=z8530_param">z8530_param</a>(bas, baudrate, databits, stopbits, <a href="ident?i=parity">parity</a>, &amp;tpc);
<a name=L171 href="source/dev/uart/uart_dev_z8530.c#L171">171</a>         return (int)tpc;
<a name=L172 href="source/dev/uart/uart_dev_z8530.c#L172">172</a> }
<a name=L173 href="source/dev/uart/uart_dev_z8530.c#L173">173</a> 
<a name=L174 href="source/dev/uart/uart_dev_z8530.c#L174">174</a> <b><i>/*</i></b>
<a name=L175 href="source/dev/uart/uart_dev_z8530.c#L175">175</a> <b><i> * Low-level UART interface.</i></b>
<a name=L176 href="source/dev/uart/uart_dev_z8530.c#L176">176</a> <b><i> */</i></b>
<a name=L177 href="source/dev/uart/uart_dev_z8530.c#L177">177</a> static int <a href="ident?i=z8530_probe">z8530_probe</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas);
<a name=L178 href="source/dev/uart/uart_dev_z8530.c#L178">178</a> static void <a href="ident?i=z8530_init">z8530_init</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int, int, int, int);
<a name=L179 href="source/dev/uart/uart_dev_z8530.c#L179">179</a> static void <a href="ident?i=z8530_term">z8530_term</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas);
<a name=L180 href="source/dev/uart/uart_dev_z8530.c#L180">180</a> static void <a href="ident?i=z8530_putc">z8530_putc</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int);
<a name=L181 href="source/dev/uart/uart_dev_z8530.c#L181">181</a> static int <a href="ident?i=z8530_poll">z8530_poll</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas);
<a name=L182 href="source/dev/uart/uart_dev_z8530.c#L182">182</a> static int <a href="ident?i=z8530_getc">z8530_getc</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas);
<a name=L183 href="source/dev/uart/uart_dev_z8530.c#L183">183</a> 
<a name=L184 href="source/dev/uart/uart_dev_z8530.c#L184">184</a> struct <a href="ident?i=uart_ops">uart_ops</a> <a href="ident?i=uart_z8530_ops">uart_z8530_ops</a> = {
<a name=L185 href="source/dev/uart/uart_dev_z8530.c#L185">185</a>         .<a href="ident?i=probe">probe</a> = <a href="ident?i=z8530_probe">z8530_probe</a>,
<a name=L186 href="source/dev/uart/uart_dev_z8530.c#L186">186</a>         .<a href="ident?i=init">init</a> = <a href="ident?i=z8530_init">z8530_init</a>,
<a name=L187 href="source/dev/uart/uart_dev_z8530.c#L187">187</a>         .<a href="ident?i=term">term</a> = <a href="ident?i=z8530_term">z8530_term</a>,
<a name=L188 href="source/dev/uart/uart_dev_z8530.c#L188">188</a>         .<a href="ident?i=putc">putc</a> = <a href="ident?i=z8530_putc">z8530_putc</a>,
<a name=L189 href="source/dev/uart/uart_dev_z8530.c#L189">189</a>         .<a href="ident?i=poll">poll</a> = <a href="ident?i=z8530_poll">z8530_poll</a>,
<a name=L190 href="source/dev/uart/uart_dev_z8530.c#L190">190</a>         .<a href="ident?i=getc">getc</a> = <a href="ident?i=z8530_getc">z8530_getc</a>,
<a name=L191 href="source/dev/uart/uart_dev_z8530.c#L191">191</a> };
<a name=L192 href="source/dev/uart/uart_dev_z8530.c#L192">192</a> 
<a name=L193 href="source/dev/uart/uart_dev_z8530.c#L193">193</a> static int
<a name=L194 href="source/dev/uart/uart_dev_z8530.c#L194">194</a> <a href="ident?i=z8530_probe">z8530_probe</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas)
<a name=L195 href="source/dev/uart/uart_dev_z8530.c#L195">195</a> {
<a name=L196 href="source/dev/uart/uart_dev_z8530.c#L196">196</a> 
<a name=L197 href="source/dev/uart/uart_dev_z8530.c#L197">197</a>         return (0);
<a name=L198 href="source/dev/uart/uart_dev_z8530.c#L198">198</a> }
<a name=L199 href="source/dev/uart/uart_dev_z8530.c#L199">199</a> 
<a name=L200 href="source/dev/uart/uart_dev_z8530.c#L200">200</a> static void
<a name=L201 href="source/dev/uart/uart_dev_z8530.c#L201">201</a> <a href="ident?i=z8530_init">z8530_init</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int baudrate, int databits, int stopbits,
<a name=L202 href="source/dev/uart/uart_dev_z8530.c#L202">202</a>     int <a href="ident?i=parity">parity</a>)
<a name=L203 href="source/dev/uart/uart_dev_z8530.c#L203">203</a> {
<a name=L204 href="source/dev/uart/uart_dev_z8530.c#L204">204</a> 
<a name=L205 href="source/dev/uart/uart_dev_z8530.c#L205">205</a>         <a href="ident?i=z8530_setup">z8530_setup</a>(bas, baudrate, databits, stopbits, <a href="ident?i=parity">parity</a>);
<a name=L206 href="source/dev/uart/uart_dev_z8530.c#L206">206</a> }
<a name=L207 href="source/dev/uart/uart_dev_z8530.c#L207">207</a> 
<a name=L208 href="source/dev/uart/uart_dev_z8530.c#L208">208</a> static void
<a name=L209 href="source/dev/uart/uart_dev_z8530.c#L209">209</a> <a href="ident?i=z8530_term">z8530_term</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas)
<a name=L210 href="source/dev/uart/uart_dev_z8530.c#L210">210</a> {
<a name=L211 href="source/dev/uart/uart_dev_z8530.c#L211">211</a> }
<a name=L212 href="source/dev/uart/uart_dev_z8530.c#L212">212</a> 
<a name=L213 href="source/dev/uart/uart_dev_z8530.c#L213">213</a> static void
<a name=L214 href="source/dev/uart/uart_dev_z8530.c#L214">214</a> <a href="ident?i=z8530_putc">z8530_putc</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas, int <a href="ident?i=c">c</a>)
<a name=L215 href="source/dev/uart/uart_dev_z8530.c#L215">215</a> {
<a name=L216 href="source/dev/uart/uart_dev_z8530.c#L216">216</a> 
<a name=L217 href="source/dev/uart/uart_dev_z8530.c#L217">217</a>         while (!(<a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>) &amp; <a href="ident?i=BES_TXE">BES_TXE</a>))
<a name=L218 href="source/dev/uart/uart_dev_z8530.c#L218">218</a>                 ;
<a name=L219 href="source/dev/uart/uart_dev_z8530.c#L219">219</a>         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_DATA">REG_DATA</a>, <a href="ident?i=c">c</a>);
<a name=L220 href="source/dev/uart/uart_dev_z8530.c#L220">220</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L221 href="source/dev/uart/uart_dev_z8530.c#L221">221</a> }
<a name=L222 href="source/dev/uart/uart_dev_z8530.c#L222">222</a> 
<a name=L223 href="source/dev/uart/uart_dev_z8530.c#L223">223</a> static int
<a name=L224 href="source/dev/uart/uart_dev_z8530.c#L224">224</a> <a href="ident?i=z8530_poll">z8530_poll</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas)
<a name=L225 href="source/dev/uart/uart_dev_z8530.c#L225">225</a> {
<a name=L226 href="source/dev/uart/uart_dev_z8530.c#L226">226</a> 
<a name=L227 href="source/dev/uart/uart_dev_z8530.c#L227">227</a>         if (!(<a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>) &amp; <a href="ident?i=BES_RXA">BES_RXA</a>))
<a name=L228 href="source/dev/uart/uart_dev_z8530.c#L228">228</a>                 return (-1);
<a name=L229 href="source/dev/uart/uart_dev_z8530.c#L229">229</a>         return (<a href="ident?i=uart_getreg">uart_getreg</a>(bas, <a href="ident?i=REG_DATA">REG_DATA</a>));
<a name=L230 href="source/dev/uart/uart_dev_z8530.c#L230">230</a> }
<a name=L231 href="source/dev/uart/uart_dev_z8530.c#L231">231</a> 
<a name=L232 href="source/dev/uart/uart_dev_z8530.c#L232">232</a> static int
<a name=L233 href="source/dev/uart/uart_dev_z8530.c#L233">233</a> <a href="ident?i=z8530_getc">z8530_getc</a>(struct <a href="ident?i=uart_bas">uart_bas</a> *bas)
<a name=L234 href="source/dev/uart/uart_dev_z8530.c#L234">234</a> {
<a name=L235 href="source/dev/uart/uart_dev_z8530.c#L235">235</a> 
<a name=L236 href="source/dev/uart/uart_dev_z8530.c#L236">236</a>         while (!(<a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>) &amp; <a href="ident?i=BES_RXA">BES_RXA</a>))
<a name=L237 href="source/dev/uart/uart_dev_z8530.c#L237">237</a>                 ;
<a name=L238 href="source/dev/uart/uart_dev_z8530.c#L238">238</a>         return (<a href="ident?i=uart_getreg">uart_getreg</a>(bas, <a href="ident?i=REG_DATA">REG_DATA</a>));
<a name=L239 href="source/dev/uart/uart_dev_z8530.c#L239">239</a> }
<a name=L240 href="source/dev/uart/uart_dev_z8530.c#L240">240</a> 
<a name=L241 href="source/dev/uart/uart_dev_z8530.c#L241">241</a> <b><i>/*</i></b>
<a name=L242 href="source/dev/uart/uart_dev_z8530.c#L242">242</a> <b><i> * High-level UART interface.</i></b>
<a name=L243 href="source/dev/uart/uart_dev_z8530.c#L243">243</a> <b><i> */</i></b>
<a name=L244 href="source/dev/uart/uart_dev_z8530.c#L244">244</a> struct <a href="ident?i=z8530_softc">z8530_softc</a> {
<a name=L245 href="source/dev/uart/uart_dev_z8530.c#L245">245</a>         struct <a href="ident?i=uart_softc">uart_softc</a> <a href="ident?i=base">base</a>;
<a name=L246 href="source/dev/uart/uart_dev_z8530.c#L246">246</a>         <a href="ident?i=uint8_t">uint8_t</a> tpc;
<a name=L247 href="source/dev/uart/uart_dev_z8530.c#L247">247</a>         <a href="ident?i=uint8_t">uint8_t</a> txidle;
<a name=L248 href="source/dev/uart/uart_dev_z8530.c#L248">248</a> };
<a name=L249 href="source/dev/uart/uart_dev_z8530.c#L249">249</a> 
<a name=L250 href="source/dev/uart/uart_dev_z8530.c#L250">250</a> static int <a href="ident?i=z8530_bus_attach">z8530_bus_attach</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *);
<a name=L251 href="source/dev/uart/uart_dev_z8530.c#L251">251</a> static int <a href="ident?i=z8530_bus_detach">z8530_bus_detach</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *);
<a name=L252 href="source/dev/uart/uart_dev_z8530.c#L252">252</a> static int <a href="ident?i=z8530_bus_flush">z8530_bus_flush</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *, int);
<a name=L253 href="source/dev/uart/uart_dev_z8530.c#L253">253</a> static int <a href="ident?i=z8530_bus_getsig">z8530_bus_getsig</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *);
<a name=L254 href="source/dev/uart/uart_dev_z8530.c#L254">254</a> static int <a href="ident?i=z8530_bus_ioctl">z8530_bus_ioctl</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *, int, <a href="ident?i=intptr_t">intptr_t</a>);
<a name=L255 href="source/dev/uart/uart_dev_z8530.c#L255">255</a> static int <a href="ident?i=z8530_bus_ipend">z8530_bus_ipend</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *);
<a name=L256 href="source/dev/uart/uart_dev_z8530.c#L256">256</a> static int <a href="ident?i=z8530_bus_param">z8530_bus_param</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *, int, int, int, int);
<a name=L257 href="source/dev/uart/uart_dev_z8530.c#L257">257</a> static int <a href="ident?i=z8530_bus_probe">z8530_bus_probe</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *);
<a name=L258 href="source/dev/uart/uart_dev_z8530.c#L258">258</a> static int <a href="ident?i=z8530_bus_receive">z8530_bus_receive</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *);
<a name=L259 href="source/dev/uart/uart_dev_z8530.c#L259">259</a> static int <a href="ident?i=z8530_bus_setsig">z8530_bus_setsig</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *, int);
<a name=L260 href="source/dev/uart/uart_dev_z8530.c#L260">260</a> static int <a href="ident?i=z8530_bus_transmit">z8530_bus_transmit</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *);
<a name=L261 href="source/dev/uart/uart_dev_z8530.c#L261">261</a> 
<a name=L262 href="source/dev/uart/uart_dev_z8530.c#L262">262</a> static <a href="ident?i=kobj_method_t">kobj_method_t</a> <a href="ident?i=z8530_methods">z8530_methods</a>[] = {
<a name=L263 href="source/dev/uart/uart_dev_z8530.c#L263">263</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_attach,         <a href="ident?i=z8530_bus_attach">z8530_bus_attach</a>),
<a name=L264 href="source/dev/uart/uart_dev_z8530.c#L264">264</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_detach,         <a href="ident?i=z8530_bus_detach">z8530_bus_detach</a>),
<a name=L265 href="source/dev/uart/uart_dev_z8530.c#L265">265</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_flush,          <a href="ident?i=z8530_bus_flush">z8530_bus_flush</a>),
<a name=L266 href="source/dev/uart/uart_dev_z8530.c#L266">266</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_getsig,         <a href="ident?i=z8530_bus_getsig">z8530_bus_getsig</a>),
<a name=L267 href="source/dev/uart/uart_dev_z8530.c#L267">267</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_ioctl,          <a href="ident?i=z8530_bus_ioctl">z8530_bus_ioctl</a>),
<a name=L268 href="source/dev/uart/uart_dev_z8530.c#L268">268</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_ipend,          <a href="ident?i=z8530_bus_ipend">z8530_bus_ipend</a>),
<a name=L269 href="source/dev/uart/uart_dev_z8530.c#L269">269</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_param,          <a href="ident?i=z8530_bus_param">z8530_bus_param</a>),
<a name=L270 href="source/dev/uart/uart_dev_z8530.c#L270">270</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(<a href="ident?i=uart_probe">uart_probe</a>,          <a href="ident?i=z8530_bus_probe">z8530_bus_probe</a>),
<a name=L271 href="source/dev/uart/uart_dev_z8530.c#L271">271</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_receive,        <a href="ident?i=z8530_bus_receive">z8530_bus_receive</a>),
<a name=L272 href="source/dev/uart/uart_dev_z8530.c#L272">272</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_setsig,         <a href="ident?i=z8530_bus_setsig">z8530_bus_setsig</a>),
<a name=L273 href="source/dev/uart/uart_dev_z8530.c#L273">273</a>         <a href="ident?i=KOBJMETHOD">KOBJMETHOD</a>(uart_transmit,       <a href="ident?i=z8530_bus_transmit">z8530_bus_transmit</a>),
<a name=L274 href="source/dev/uart/uart_dev_z8530.c#L274">274</a>         { 0, 0 }
<a name=L275 href="source/dev/uart/uart_dev_z8530.c#L275">275</a> };
<a name=L276 href="source/dev/uart/uart_dev_z8530.c#L276">276</a> 
<a name=L277 href="source/dev/uart/uart_dev_z8530.c#L277">277</a> struct <a href="ident?i=uart_class">uart_class</a> <a href="ident?i=uart_z8530_class">uart_z8530_class</a> = {
<a name=L278 href="source/dev/uart/uart_dev_z8530.c#L278">278</a>         <i>"z8530 class"</i>,
<a name=L279 href="source/dev/uart/uart_dev_z8530.c#L279">279</a>         <a href="ident?i=z8530_methods">z8530_methods</a>,
<a name=L280 href="source/dev/uart/uart_dev_z8530.c#L280">280</a>         sizeof(struct <a href="ident?i=z8530_softc">z8530_softc</a>),
<a name=L281 href="source/dev/uart/uart_dev_z8530.c#L281">281</a>         .uc_range = 2,
<a name=L282 href="source/dev/uart/uart_dev_z8530.c#L282">282</a>         .uc_rclk = <a href="ident?i=DEFAULT_RCLK">DEFAULT_RCLK</a>
<a name=L283 href="source/dev/uart/uart_dev_z8530.c#L283">283</a> };
<a name=L284 href="source/dev/uart/uart_dev_z8530.c#L284">284</a> 
<a name=L285 href="source/dev/uart/uart_dev_z8530.c#L285">285</a> #define <a href="ident?i=SIGCHG">SIGCHG</a>(<a href="ident?i=c">c</a>, <a href="ident?i=i">i</a>, <a href="ident?i=s">s</a>, <a href="ident?i=d">d</a>)                              \
<a name=L286 href="source/dev/uart/uart_dev_z8530.c#L286">286</a>         if (<a href="ident?i=c">c</a>) {                                        \
<a name=L287 href="source/dev/uart/uart_dev_z8530.c#L287">287</a>                 <a href="ident?i=i">i</a> |= (<a href="ident?i=i">i</a> &amp; <a href="ident?i=s">s</a>) ? <a href="ident?i=s">s</a> : <a href="ident?i=s">s</a> | <a href="ident?i=d">d</a>;               \
<a name=L288 href="source/dev/uart/uart_dev_z8530.c#L288">288</a>         } else {                                        \
<a name=L289 href="source/dev/uart/uart_dev_z8530.c#L289">289</a>                 <a href="ident?i=i">i</a> = (<a href="ident?i=i">i</a> &amp; <a href="ident?i=s">s</a>) ? (<a href="ident?i=i">i</a> &amp; ~s) | <a href="ident?i=d">d</a> : <a href="ident?i=i">i</a>;         \
<a name=L290 href="source/dev/uart/uart_dev_z8530.c#L290">290</a>         }
<a name=L291 href="source/dev/uart/uart_dev_z8530.c#L291">291</a> 
<a name=L292 href="source/dev/uart/uart_dev_z8530.c#L292">292</a> static int
<a name=L293 href="source/dev/uart/uart_dev_z8530.c#L293">293</a> <a href="ident?i=z8530_bus_attach">z8530_bus_attach</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>)
<a name=L294 href="source/dev/uart/uart_dev_z8530.c#L294">294</a> {
<a name=L295 href="source/dev/uart/uart_dev_z8530.c#L295">295</a>         struct <a href="ident?i=z8530_softc">z8530_softc</a> *z8530 = (struct <a href="ident?i=z8530_softc">z8530_softc</a>*)<a href="ident?i=sc">sc</a>;
<a name=L296 href="source/dev/uart/uart_dev_z8530.c#L296">296</a>         struct <a href="ident?i=uart_bas">uart_bas</a> *bas;
<a name=L297 href="source/dev/uart/uart_dev_z8530.c#L297">297</a>         struct <a href="ident?i=uart_devinfo">uart_devinfo</a> *di;
<a name=L298 href="source/dev/uart/uart_dev_z8530.c#L298">298</a> 
<a name=L299 href="source/dev/uart/uart_dev_z8530.c#L299">299</a>         bas = &amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas;
<a name=L300 href="source/dev/uart/uart_dev_z8530.c#L300">300</a>         if (<a href="ident?i=sc">sc</a>-&gt;sc_sysdev != <a href="ident?i=NULL">NULL</a>) {
<a name=L301 href="source/dev/uart/uart_dev_z8530.c#L301">301</a>                 di = <a href="ident?i=sc">sc</a>-&gt;sc_sysdev;
<a name=L302 href="source/dev/uart/uart_dev_z8530.c#L302">302</a>                 z8530-&gt;tpc = <a href="ident?i=TPC_DTR">TPC_DTR</a>|<a href="ident?i=TPC_RTS">TPC_RTS</a>;
<a name=L303 href="source/dev/uart/uart_dev_z8530.c#L303">303</a>                 <a href="ident?i=z8530_param">z8530_param</a>(bas, di-&gt;baudrate, di-&gt;databits, di-&gt;stopbits,
<a name=L304 href="source/dev/uart/uart_dev_z8530.c#L304">304</a>                     di-&gt;<a href="ident?i=parity">parity</a>, &amp;z8530-&gt;tpc);
<a name=L305 href="source/dev/uart/uart_dev_z8530.c#L305">305</a>         } else {
<a name=L306 href="source/dev/uart/uart_dev_z8530.c#L306">306</a>                 z8530-&gt;tpc = <a href="ident?i=z8530_setup">z8530_setup</a>(bas, 9600, 8, 1, <a href="ident?i=UART_PARITY_NONE">UART_PARITY_NONE</a>);
<a name=L307 href="source/dev/uart/uart_dev_z8530.c#L307">307</a>                 z8530-&gt;tpc &amp;= ~(<a href="ident?i=TPC_DTR">TPC_DTR</a>|<a href="ident?i=TPC_RTS">TPC_RTS</a>);
<a name=L308 href="source/dev/uart/uart_dev_z8530.c#L308">308</a>         }
<a name=L309 href="source/dev/uart/uart_dev_z8530.c#L309">309</a>         z8530-&gt;txidle = 1;      <b><i>/* Report UART_IPEND_TXIDLE. */</i></b>
<a name=L310 href="source/dev/uart/uart_dev_z8530.c#L310">310</a> 
<a name=L311 href="source/dev/uart/uart_dev_z8530.c#L311">311</a>         <a href="ident?i=sc">sc</a>-&gt;sc_rxfifosz = 3;
<a name=L312 href="source/dev/uart/uart_dev_z8530.c#L312">312</a>         <a href="ident?i=sc">sc</a>-&gt;sc_txfifosz = 1;
<a name=L313 href="source/dev/uart/uart_dev_z8530.c#L313">313</a> 
<a name=L314 href="source/dev/uart/uart_dev_z8530.c#L314">314</a>         (void)<a href="ident?i=z8530_bus_getsig">z8530_bus_getsig</a>(<a href="ident?i=sc">sc</a>);
<a name=L315 href="source/dev/uart/uart_dev_z8530.c#L315">315</a> 
<a name=L316 href="source/dev/uart/uart_dev_z8530.c#L316">316</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_IC">WR_IC</a>, <a href="ident?i=IC_BRK">IC_BRK</a> | <a href="ident?i=IC_CTS">IC_CTS</a> | <a href="ident?i=IC_DCD">IC_DCD</a>);
<a name=L317 href="source/dev/uart/uart_dev_z8530.c#L317">317</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L318 href="source/dev/uart/uart_dev_z8530.c#L318">318</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_IDT">WR_IDT</a>, <a href="ident?i=IDT_TIE">IDT_TIE</a> | <a href="ident?i=IDT_RIA">IDT_RIA</a>);
<a name=L319 href="source/dev/uart/uart_dev_z8530.c#L319">319</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L320 href="source/dev/uart/uart_dev_z8530.c#L320">320</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_IV">WR_IV</a>, 0);
<a name=L321 href="source/dev/uart/uart_dev_z8530.c#L321">321</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L322 href="source/dev/uart/uart_dev_z8530.c#L322">322</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_TPC">WR_TPC</a>, z8530-&gt;tpc);
<a name=L323 href="source/dev/uart/uart_dev_z8530.c#L323">323</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L324 href="source/dev/uart/uart_dev_z8530.c#L324">324</a>         return (0);
<a name=L325 href="source/dev/uart/uart_dev_z8530.c#L325">325</a> }
<a name=L326 href="source/dev/uart/uart_dev_z8530.c#L326">326</a> 
<a name=L327 href="source/dev/uart/uart_dev_z8530.c#L327">327</a> static int
<a name=L328 href="source/dev/uart/uart_dev_z8530.c#L328">328</a> <a href="ident?i=z8530_bus_detach">z8530_bus_detach</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>)
<a name=L329 href="source/dev/uart/uart_dev_z8530.c#L329">329</a> {
<a name=L330 href="source/dev/uart/uart_dev_z8530.c#L330">330</a> 
<a name=L331 href="source/dev/uart/uart_dev_z8530.c#L331">331</a>         return (0);
<a name=L332 href="source/dev/uart/uart_dev_z8530.c#L332">332</a> }
<a name=L333 href="source/dev/uart/uart_dev_z8530.c#L333">333</a> 
<a name=L334 href="source/dev/uart/uart_dev_z8530.c#L334">334</a> static int
<a name=L335 href="source/dev/uart/uart_dev_z8530.c#L335">335</a> <a href="ident?i=z8530_bus_flush">z8530_bus_flush</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>, int <a href="ident?i=what">what</a>)
<a name=L336 href="source/dev/uart/uart_dev_z8530.c#L336">336</a> {
<a name=L337 href="source/dev/uart/uart_dev_z8530.c#L337">337</a> 
<a name=L338 href="source/dev/uart/uart_dev_z8530.c#L338">338</a>         return (0);
<a name=L339 href="source/dev/uart/uart_dev_z8530.c#L339">339</a> }
<a name=L340 href="source/dev/uart/uart_dev_z8530.c#L340">340</a> 
<a name=L341 href="source/dev/uart/uart_dev_z8530.c#L341">341</a> static int
<a name=L342 href="source/dev/uart/uart_dev_z8530.c#L342">342</a> <a href="ident?i=z8530_bus_getsig">z8530_bus_getsig</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>)
<a name=L343 href="source/dev/uart/uart_dev_z8530.c#L343">343</a> {
<a name=L344 href="source/dev/uart/uart_dev_z8530.c#L344">344</a>         <a href="ident?i=uint32_t">uint32_t</a> <a href="ident?i=new">new</a>, <a href="ident?i=old">old</a>, <a href="ident?i=sig">sig</a>;
<a name=L345 href="source/dev/uart/uart_dev_z8530.c#L345">345</a>         <a href="ident?i=uint8_t">uint8_t</a> bes;
<a name=L346 href="source/dev/uart/uart_dev_z8530.c#L346">346</a> 
<a name=L347 href="source/dev/uart/uart_dev_z8530.c#L347">347</a>         do {
<a name=L348 href="source/dev/uart/uart_dev_z8530.c#L348">348</a>                 <a href="ident?i=old">old</a> = <a href="ident?i=sc">sc</a>-&gt;sc_hwsig;
<a name=L349 href="source/dev/uart/uart_dev_z8530.c#L349">349</a>                 <a href="ident?i=sig">sig</a> = <a href="ident?i=old">old</a>;
<a name=L350 href="source/dev/uart/uart_dev_z8530.c#L350">350</a>                 <a href="ident?i=mtx_lock_spin">mtx_lock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L351 href="source/dev/uart/uart_dev_z8530.c#L351">351</a>                 bes = <a href="ident?i=uart_getmreg">uart_getmreg</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas, <a href="ident?i=RR_BES">RR_BES</a>);
<a name=L352 href="source/dev/uart/uart_dev_z8530.c#L352">352</a>                 <a href="ident?i=mtx_unlock_spin">mtx_unlock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L353 href="source/dev/uart/uart_dev_z8530.c#L353">353</a>                 <a href="ident?i=SIGCHG">SIGCHG</a>(bes &amp; <a href="ident?i=BES_CTS">BES_CTS</a>, <a href="ident?i=sig">sig</a>, <a href="ident?i=SER_CTS">SER_CTS</a>, <a href="ident?i=SER_DCTS">SER_DCTS</a>);
<a name=L354 href="source/dev/uart/uart_dev_z8530.c#L354">354</a>                 <a href="ident?i=SIGCHG">SIGCHG</a>(bes &amp; <a href="ident?i=BES_DCD">BES_DCD</a>, <a href="ident?i=sig">sig</a>, <a href="ident?i=SER_DCD">SER_DCD</a>, <a href="ident?i=SER_DDCD">SER_DDCD</a>);
<a name=L355 href="source/dev/uart/uart_dev_z8530.c#L355">355</a>                 <a href="ident?i=new">new</a> = <a href="ident?i=sig">sig</a> &amp; ~UART_SIGMASK_DELTA;
<a name=L356 href="source/dev/uart/uart_dev_z8530.c#L356">356</a>         } while (!<a href="ident?i=atomic_cmpset_32">atomic_cmpset_32</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwsig, <a href="ident?i=old">old</a>, <a href="ident?i=new">new</a>));
<a name=L357 href="source/dev/uart/uart_dev_z8530.c#L357">357</a>         return (<a href="ident?i=sig">sig</a>);
<a name=L358 href="source/dev/uart/uart_dev_z8530.c#L358">358</a> }
<a name=L359 href="source/dev/uart/uart_dev_z8530.c#L359">359</a> 
<a name=L360 href="source/dev/uart/uart_dev_z8530.c#L360">360</a> static int
<a name=L361 href="source/dev/uart/uart_dev_z8530.c#L361">361</a> <a href="ident?i=z8530_bus_ioctl">z8530_bus_ioctl</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>, int <a href="ident?i=request">request</a>, <a href="ident?i=intptr_t">intptr_t</a> <a href="ident?i=data">data</a>)
<a name=L362 href="source/dev/uart/uart_dev_z8530.c#L362">362</a> {
<a name=L363 href="source/dev/uart/uart_dev_z8530.c#L363">363</a>         struct <a href="ident?i=z8530_softc">z8530_softc</a> *z8530 = (struct <a href="ident?i=z8530_softc">z8530_softc</a>*)<a href="ident?i=sc">sc</a>;
<a name=L364 href="source/dev/uart/uart_dev_z8530.c#L364">364</a>         struct <a href="ident?i=uart_bas">uart_bas</a> *bas;
<a name=L365 href="source/dev/uart/uart_dev_z8530.c#L365">365</a>         int <a href="ident?i=error">error</a>;
<a name=L366 href="source/dev/uart/uart_dev_z8530.c#L366">366</a> 
<a name=L367 href="source/dev/uart/uart_dev_z8530.c#L367">367</a>         bas = &amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas;
<a name=L368 href="source/dev/uart/uart_dev_z8530.c#L368">368</a>         <a href="ident?i=error">error</a> = 0;
<a name=L369 href="source/dev/uart/uart_dev_z8530.c#L369">369</a>         <a href="ident?i=mtx_lock_spin">mtx_lock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L370 href="source/dev/uart/uart_dev_z8530.c#L370">370</a>         switch (<a href="ident?i=request">request</a>) {
<a name=L371 href="source/dev/uart/uart_dev_z8530.c#L371">371</a>         case <a href="ident?i=UART_IOCTL_BREAK">UART_IOCTL_BREAK</a>:
<a name=L372 href="source/dev/uart/uart_dev_z8530.c#L372">372</a>                 if (<a href="ident?i=data">data</a>)
<a name=L373 href="source/dev/uart/uart_dev_z8530.c#L373">373</a>                         z8530-&gt;tpc |= <a href="ident?i=TPC_BRK">TPC_BRK</a>;
<a name=L374 href="source/dev/uart/uart_dev_z8530.c#L374">374</a>                 else
<a name=L375 href="source/dev/uart/uart_dev_z8530.c#L375">375</a>                         z8530-&gt;tpc &amp;= ~TPC_BRK;
<a name=L376 href="source/dev/uart/uart_dev_z8530.c#L376">376</a>                 <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_TPC">WR_TPC</a>, z8530-&gt;tpc);
<a name=L377 href="source/dev/uart/uart_dev_z8530.c#L377">377</a>                 <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L378 href="source/dev/uart/uart_dev_z8530.c#L378">378</a>                 break;
<a name=L379 href="source/dev/uart/uart_dev_z8530.c#L379">379</a>         default:
<a name=L380 href="source/dev/uart/uart_dev_z8530.c#L380">380</a>                 <a href="ident?i=error">error</a> = <a href="ident?i=EINVAL">EINVAL</a>;
<a name=L381 href="source/dev/uart/uart_dev_z8530.c#L381">381</a>                 break;
<a name=L382 href="source/dev/uart/uart_dev_z8530.c#L382">382</a>         }
<a name=L383 href="source/dev/uart/uart_dev_z8530.c#L383">383</a>         <a href="ident?i=mtx_unlock_spin">mtx_unlock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L384 href="source/dev/uart/uart_dev_z8530.c#L384">384</a>         return (<a href="ident?i=error">error</a>);
<a name=L385 href="source/dev/uart/uart_dev_z8530.c#L385">385</a> }
<a name=L386 href="source/dev/uart/uart_dev_z8530.c#L386">386</a> 
<a name=L387 href="source/dev/uart/uart_dev_z8530.c#L387">387</a> static int
<a name=L388 href="source/dev/uart/uart_dev_z8530.c#L388">388</a> <a href="ident?i=z8530_bus_ipend">z8530_bus_ipend</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>)
<a name=L389 href="source/dev/uart/uart_dev_z8530.c#L389">389</a> {
<a name=L390 href="source/dev/uart/uart_dev_z8530.c#L390">390</a>         struct <a href="ident?i=z8530_softc">z8530_softc</a> *z8530 = (struct <a href="ident?i=z8530_softc">z8530_softc</a>*)<a href="ident?i=sc">sc</a>;
<a name=L391 href="source/dev/uart/uart_dev_z8530.c#L391">391</a>         struct <a href="ident?i=uart_bas">uart_bas</a> *bas;
<a name=L392 href="source/dev/uart/uart_dev_z8530.c#L392">392</a>         int ipend;
<a name=L393 href="source/dev/uart/uart_dev_z8530.c#L393">393</a>         <a href="ident?i=uint32_t">uint32_t</a> <a href="ident?i=sig">sig</a>;
<a name=L394 href="source/dev/uart/uart_dev_z8530.c#L394">394</a>         <a href="ident?i=uint8_t">uint8_t</a> bes, <a href="ident?i=src">src</a>;
<a name=L395 href="source/dev/uart/uart_dev_z8530.c#L395">395</a> 
<a name=L396 href="source/dev/uart/uart_dev_z8530.c#L396">396</a>         bas = &amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas;
<a name=L397 href="source/dev/uart/uart_dev_z8530.c#L397">397</a>         ipend = 0;
<a name=L398 href="source/dev/uart/uart_dev_z8530.c#L398">398</a>         <a href="ident?i=mtx_lock_spin">mtx_lock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L399 href="source/dev/uart/uart_dev_z8530.c#L399">399</a>         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=CR_RSTIUS">CR_RSTIUS</a>);
<a name=L400 href="source/dev/uart/uart_dev_z8530.c#L400">400</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L401 href="source/dev/uart/uart_dev_z8530.c#L401">401</a>         bes = <a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>);
<a name=L402 href="source/dev/uart/uart_dev_z8530.c#L402">402</a>         if (bes &amp; <a href="ident?i=BES_BRK">BES_BRK</a>) {
<a name=L403 href="source/dev/uart/uart_dev_z8530.c#L403">403</a>                 <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=CR_RSTXSI">CR_RSTXSI</a>);
<a name=L404 href="source/dev/uart/uart_dev_z8530.c#L404">404</a>                 ipend |= <a href="ident?i=UART_IPEND_BREAK">UART_IPEND_BREAK</a>;
<a name=L405 href="source/dev/uart/uart_dev_z8530.c#L405">405</a>         }
<a name=L406 href="source/dev/uart/uart_dev_z8530.c#L406">406</a>         if (bes &amp; <a href="ident?i=BES_TXE">BES_TXE</a> &amp;&amp; z8530-&gt;txidle) {
<a name=L407 href="source/dev/uart/uart_dev_z8530.c#L407">407</a>                 <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=CR_RSTTXI">CR_RSTTXI</a>);
<a name=L408 href="source/dev/uart/uart_dev_z8530.c#L408">408</a>                 ipend |= <a href="ident?i=UART_IPEND_TXIDLE">UART_IPEND_TXIDLE</a>;
<a name=L409 href="source/dev/uart/uart_dev_z8530.c#L409">409</a>                 z8530-&gt;txidle = 0;      <b><i>/* Suppress UART_IPEND_TXIDLE. */</i></b>
<a name=L410 href="source/dev/uart/uart_dev_z8530.c#L410">410</a>         }
<a name=L411 href="source/dev/uart/uart_dev_z8530.c#L411">411</a>         if (bes &amp; <a href="ident?i=BES_RXA">BES_RXA</a>)
<a name=L412 href="source/dev/uart/uart_dev_z8530.c#L412">412</a>                 ipend |= <a href="ident?i=UART_IPEND_RXREADY">UART_IPEND_RXREADY</a>;
<a name=L413 href="source/dev/uart/uart_dev_z8530.c#L413">413</a>         <a href="ident?i=sig">sig</a> = <a href="ident?i=sc">sc</a>-&gt;sc_hwsig;
<a name=L414 href="source/dev/uart/uart_dev_z8530.c#L414">414</a>         <a href="ident?i=SIGCHG">SIGCHG</a>(bes &amp; <a href="ident?i=BES_CTS">BES_CTS</a>, <a href="ident?i=sig">sig</a>, <a href="ident?i=SER_CTS">SER_CTS</a>, <a href="ident?i=SER_DCTS">SER_DCTS</a>);
<a name=L415 href="source/dev/uart/uart_dev_z8530.c#L415">415</a>         <a href="ident?i=SIGCHG">SIGCHG</a>(bes &amp; <a href="ident?i=BES_DCD">BES_DCD</a>, <a href="ident?i=sig">sig</a>, <a href="ident?i=SER_DCD">SER_DCD</a>, <a href="ident?i=SER_DDCD">SER_DDCD</a>);
<a name=L416 href="source/dev/uart/uart_dev_z8530.c#L416">416</a>         if (<a href="ident?i=sig">sig</a> &amp; <a href="ident?i=UART_SIGMASK_DELTA">UART_SIGMASK_DELTA</a>)
<a name=L417 href="source/dev/uart/uart_dev_z8530.c#L417">417</a>                 ipend |= <a href="ident?i=UART_IPEND_SIGCHG">UART_IPEND_SIGCHG</a>;
<a name=L418 href="source/dev/uart/uart_dev_z8530.c#L418">418</a>         <a href="ident?i=src">src</a> = <a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_SRC">RR_SRC</a>);
<a name=L419 href="source/dev/uart/uart_dev_z8530.c#L419">419</a>         if (<a href="ident?i=src">src</a> &amp; <a href="ident?i=SRC_OVR">SRC_OVR</a>) {
<a name=L420 href="source/dev/uart/uart_dev_z8530.c#L420">420</a>                 <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=CR_RSTERR">CR_RSTERR</a>);
<a name=L421 href="source/dev/uart/uart_dev_z8530.c#L421">421</a>                 ipend |= <a href="ident?i=UART_IPEND_OVERRUN">UART_IPEND_OVERRUN</a>;
<a name=L422 href="source/dev/uart/uart_dev_z8530.c#L422">422</a>         }
<a name=L423 href="source/dev/uart/uart_dev_z8530.c#L423">423</a>         <a href="ident?i=mtx_unlock_spin">mtx_unlock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L424 href="source/dev/uart/uart_dev_z8530.c#L424">424</a>         return (ipend);
<a name=L425 href="source/dev/uart/uart_dev_z8530.c#L425">425</a> }
<a name=L426 href="source/dev/uart/uart_dev_z8530.c#L426">426</a> 
<a name=L427 href="source/dev/uart/uart_dev_z8530.c#L427">427</a> static int
<a name=L428 href="source/dev/uart/uart_dev_z8530.c#L428">428</a> <a href="ident?i=z8530_bus_param">z8530_bus_param</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>, int baudrate, int databits,
<a name=L429 href="source/dev/uart/uart_dev_z8530.c#L429">429</a>     int stopbits, int <a href="ident?i=parity">parity</a>)
<a name=L430 href="source/dev/uart/uart_dev_z8530.c#L430">430</a> {
<a name=L431 href="source/dev/uart/uart_dev_z8530.c#L431">431</a>         struct <a href="ident?i=z8530_softc">z8530_softc</a> *z8530 = (struct <a href="ident?i=z8530_softc">z8530_softc</a>*)<a href="ident?i=sc">sc</a>;
<a name=L432 href="source/dev/uart/uart_dev_z8530.c#L432">432</a>         int <a href="ident?i=error">error</a>;
<a name=L433 href="source/dev/uart/uart_dev_z8530.c#L433">433</a> 
<a name=L434 href="source/dev/uart/uart_dev_z8530.c#L434">434</a>         <a href="ident?i=mtx_lock_spin">mtx_lock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L435 href="source/dev/uart/uart_dev_z8530.c#L435">435</a>         <a href="ident?i=error">error</a> = <a href="ident?i=z8530_param">z8530_param</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas, baudrate, databits, stopbits, <a href="ident?i=parity">parity</a>,
<a name=L436 href="source/dev/uart/uart_dev_z8530.c#L436">436</a>             &amp;z8530-&gt;tpc);
<a name=L437 href="source/dev/uart/uart_dev_z8530.c#L437">437</a>         <a href="ident?i=mtx_unlock_spin">mtx_unlock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L438 href="source/dev/uart/uart_dev_z8530.c#L438">438</a>         return (<a href="ident?i=error">error</a>);
<a name=L439 href="source/dev/uart/uart_dev_z8530.c#L439">439</a> }
<a name=L440 href="source/dev/uart/uart_dev_z8530.c#L440">440</a> 
<a name=L441 href="source/dev/uart/uart_dev_z8530.c#L441">441</a> static int
<a name=L442 href="source/dev/uart/uart_dev_z8530.c#L442">442</a> <a href="ident?i=z8530_bus_probe">z8530_bus_probe</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>)
<a name=L443 href="source/dev/uart/uart_dev_z8530.c#L443">443</a> {
<a name=L444 href="source/dev/uart/uart_dev_z8530.c#L444">444</a>         char <a href="ident?i=buf">buf</a>[80];
<a name=L445 href="source/dev/uart/uart_dev_z8530.c#L445">445</a>         int <a href="ident?i=error">error</a>;
<a name=L446 href="source/dev/uart/uart_dev_z8530.c#L446">446</a>         char <a href="ident?i=ch">ch</a>;
<a name=L447 href="source/dev/uart/uart_dev_z8530.c#L447">447</a> 
<a name=L448 href="source/dev/uart/uart_dev_z8530.c#L448">448</a>         <a href="ident?i=error">error</a> = <a href="ident?i=z8530_probe">z8530_probe</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas);
<a name=L449 href="source/dev/uart/uart_dev_z8530.c#L449">449</a>         if (<a href="ident?i=error">error</a>)
<a name=L450 href="source/dev/uart/uart_dev_z8530.c#L450">450</a>                 return (<a href="ident?i=error">error</a>);
<a name=L451 href="source/dev/uart/uart_dev_z8530.c#L451">451</a> 
<a name=L452 href="source/dev/uart/uart_dev_z8530.c#L452">452</a>         <a href="ident?i=ch">ch</a> = <a href="ident?i=sc">sc</a>-&gt;sc_bas.<a href="ident?i=chan">chan</a> - 1 + <i>'A'</i>;
<a name=L453 href="source/dev/uart/uart_dev_z8530.c#L453">453</a> 
<a name=L454 href="source/dev/uart/uart_dev_z8530.c#L454">454</a>         <a href="ident?i=snprintf">snprintf</a>(<a href="ident?i=buf">buf</a>, sizeof(<a href="ident?i=buf">buf</a>), <i>"z8530, channel %c"</i>, <a href="ident?i=ch">ch</a>);
<a name=L455 href="source/dev/uart/uart_dev_z8530.c#L455">455</a>         <a href="ident?i=device_set_desc_copy">device_set_desc_copy</a>(<a href="ident?i=sc">sc</a>-&gt;sc_dev, <a href="ident?i=buf">buf</a>);
<a name=L456 href="source/dev/uart/uart_dev_z8530.c#L456">456</a>         return (0);
<a name=L457 href="source/dev/uart/uart_dev_z8530.c#L457">457</a> }
<a name=L458 href="source/dev/uart/uart_dev_z8530.c#L458">458</a> 
<a name=L459 href="source/dev/uart/uart_dev_z8530.c#L459">459</a> static int
<a name=L460 href="source/dev/uart/uart_dev_z8530.c#L460">460</a> <a href="ident?i=z8530_bus_receive">z8530_bus_receive</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>)
<a name=L461 href="source/dev/uart/uart_dev_z8530.c#L461">461</a> {
<a name=L462 href="source/dev/uart/uart_dev_z8530.c#L462">462</a>         struct <a href="ident?i=uart_bas">uart_bas</a> *bas;
<a name=L463 href="source/dev/uart/uart_dev_z8530.c#L463">463</a>         int xc;
<a name=L464 href="source/dev/uart/uart_dev_z8530.c#L464">464</a>         <a href="ident?i=uint8_t">uint8_t</a> bes, <a href="ident?i=src">src</a>;
<a name=L465 href="source/dev/uart/uart_dev_z8530.c#L465">465</a> 
<a name=L466 href="source/dev/uart/uart_dev_z8530.c#L466">466</a>         bas = &amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas;
<a name=L467 href="source/dev/uart/uart_dev_z8530.c#L467">467</a>         <a href="ident?i=mtx_lock_spin">mtx_lock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L468 href="source/dev/uart/uart_dev_z8530.c#L468">468</a>         bes = <a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>);
<a name=L469 href="source/dev/uart/uart_dev_z8530.c#L469">469</a>         while (bes &amp; <a href="ident?i=BES_RXA">BES_RXA</a>) {
<a name=L470 href="source/dev/uart/uart_dev_z8530.c#L470">470</a>                 if (<a href="ident?i=uart_rx_full">uart_rx_full</a>(<a href="ident?i=sc">sc</a>)) {
<a name=L471 href="source/dev/uart/uart_dev_z8530.c#L471">471</a>                         <a href="ident?i=sc">sc</a>-&gt;sc_rxbuf[<a href="ident?i=sc">sc</a>-&gt;sc_rxput] = <a href="ident?i=UART_STAT_OVERRUN">UART_STAT_OVERRUN</a>;
<a name=L472 href="source/dev/uart/uart_dev_z8530.c#L472">472</a>                         break;
<a name=L473 href="source/dev/uart/uart_dev_z8530.c#L473">473</a>                 }
<a name=L474 href="source/dev/uart/uart_dev_z8530.c#L474">474</a>                 <a href="ident?i=src">src</a> = <a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_SRC">RR_SRC</a>);
<a name=L475 href="source/dev/uart/uart_dev_z8530.c#L475">475</a>                 xc = <a href="ident?i=uart_getreg">uart_getreg</a>(bas, <a href="ident?i=REG_DATA">REG_DATA</a>);
<a name=L476 href="source/dev/uart/uart_dev_z8530.c#L476">476</a>                 if (<a href="ident?i=src">src</a> &amp; <a href="ident?i=SRC_FE">SRC_FE</a>)
<a name=L477 href="source/dev/uart/uart_dev_z8530.c#L477">477</a>                         xc |= <a href="ident?i=UART_STAT_FRAMERR">UART_STAT_FRAMERR</a>;
<a name=L478 href="source/dev/uart/uart_dev_z8530.c#L478">478</a>                 if (<a href="ident?i=src">src</a> &amp; <a href="ident?i=SRC_PE">SRC_PE</a>)
<a name=L479 href="source/dev/uart/uart_dev_z8530.c#L479">479</a>                         xc |= <a href="ident?i=UART_STAT_PARERR">UART_STAT_PARERR</a>;
<a name=L480 href="source/dev/uart/uart_dev_z8530.c#L480">480</a>                 <a href="ident?i=uart_rx_put">uart_rx_put</a>(<a href="ident?i=sc">sc</a>, xc);
<a name=L481 href="source/dev/uart/uart_dev_z8530.c#L481">481</a>                 if (<a href="ident?i=src">src</a> &amp; (<a href="ident?i=SRC_FE">SRC_FE</a> | <a href="ident?i=SRC_PE">SRC_PE</a>)) {
<a name=L482 href="source/dev/uart/uart_dev_z8530.c#L482">482</a>                         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=CR_RSTERR">CR_RSTERR</a>);
<a name=L483 href="source/dev/uart/uart_dev_z8530.c#L483">483</a>                         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L484 href="source/dev/uart/uart_dev_z8530.c#L484">484</a>                 }
<a name=L485 href="source/dev/uart/uart_dev_z8530.c#L485">485</a>                 bes = <a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>);
<a name=L486 href="source/dev/uart/uart_dev_z8530.c#L486">486</a>         }
<a name=L487 href="source/dev/uart/uart_dev_z8530.c#L487">487</a>         <b><i>/* Discard everything left in the Rx FIFO. */</i></b>
<a name=L488 href="source/dev/uart/uart_dev_z8530.c#L488">488</a>         while (bes &amp; <a href="ident?i=BES_RXA">BES_RXA</a>) {
<a name=L489 href="source/dev/uart/uart_dev_z8530.c#L489">489</a>                 <a href="ident?i=src">src</a> = <a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_SRC">RR_SRC</a>);
<a name=L490 href="source/dev/uart/uart_dev_z8530.c#L490">490</a>                 (void)<a href="ident?i=uart_getreg">uart_getreg</a>(bas, <a href="ident?i=REG_DATA">REG_DATA</a>);
<a name=L491 href="source/dev/uart/uart_dev_z8530.c#L491">491</a>                 if (<a href="ident?i=src">src</a> &amp; (<a href="ident?i=SRC_FE">SRC_FE</a> | <a href="ident?i=SRC_PE">SRC_PE</a>)) {
<a name=L492 href="source/dev/uart/uart_dev_z8530.c#L492">492</a>                         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_CTRL">REG_CTRL</a>, <a href="ident?i=CR_RSTERR">CR_RSTERR</a>);
<a name=L493 href="source/dev/uart/uart_dev_z8530.c#L493">493</a>                         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L494 href="source/dev/uart/uart_dev_z8530.c#L494">494</a>                 }
<a name=L495 href="source/dev/uart/uart_dev_z8530.c#L495">495</a>                 bes = <a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>);
<a name=L496 href="source/dev/uart/uart_dev_z8530.c#L496">496</a>         }
<a name=L497 href="source/dev/uart/uart_dev_z8530.c#L497">497</a>         <a href="ident?i=mtx_unlock_spin">mtx_unlock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L498 href="source/dev/uart/uart_dev_z8530.c#L498">498</a>         return (0);
<a name=L499 href="source/dev/uart/uart_dev_z8530.c#L499">499</a> }
<a name=L500 href="source/dev/uart/uart_dev_z8530.c#L500">500</a> 
<a name=L501 href="source/dev/uart/uart_dev_z8530.c#L501">501</a> static int
<a name=L502 href="source/dev/uart/uart_dev_z8530.c#L502">502</a> <a href="ident?i=z8530_bus_setsig">z8530_bus_setsig</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>, int <a href="ident?i=sig">sig</a>)
<a name=L503 href="source/dev/uart/uart_dev_z8530.c#L503">503</a> {
<a name=L504 href="source/dev/uart/uart_dev_z8530.c#L504">504</a>         struct <a href="ident?i=z8530_softc">z8530_softc</a> *z8530 = (struct <a href="ident?i=z8530_softc">z8530_softc</a>*)<a href="ident?i=sc">sc</a>;
<a name=L505 href="source/dev/uart/uart_dev_z8530.c#L505">505</a>         struct <a href="ident?i=uart_bas">uart_bas</a> *bas;
<a name=L506 href="source/dev/uart/uart_dev_z8530.c#L506">506</a>         <a href="ident?i=uint32_t">uint32_t</a> <a href="ident?i=new">new</a>, <a href="ident?i=old">old</a>;
<a name=L507 href="source/dev/uart/uart_dev_z8530.c#L507">507</a> 
<a name=L508 href="source/dev/uart/uart_dev_z8530.c#L508">508</a>         bas = &amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas;
<a name=L509 href="source/dev/uart/uart_dev_z8530.c#L509">509</a>         do {
<a name=L510 href="source/dev/uart/uart_dev_z8530.c#L510">510</a>                 <a href="ident?i=old">old</a> = <a href="ident?i=sc">sc</a>-&gt;sc_hwsig;
<a name=L511 href="source/dev/uart/uart_dev_z8530.c#L511">511</a>                 <a href="ident?i=new">new</a> = <a href="ident?i=old">old</a>;
<a name=L512 href="source/dev/uart/uart_dev_z8530.c#L512">512</a>                 if (<a href="ident?i=sig">sig</a> &amp; <a href="ident?i=SER_DDTR">SER_DDTR</a>) {
<a name=L513 href="source/dev/uart/uart_dev_z8530.c#L513">513</a>                         <a href="ident?i=SIGCHG">SIGCHG</a>(<a href="ident?i=sig">sig</a> &amp; <a href="ident?i=SER_DTR">SER_DTR</a>, <a href="ident?i=new">new</a>, <a href="ident?i=SER_DTR">SER_DTR</a>,
<a name=L514 href="source/dev/uart/uart_dev_z8530.c#L514">514</a>                             <a href="ident?i=SER_DDTR">SER_DDTR</a>);
<a name=L515 href="source/dev/uart/uart_dev_z8530.c#L515">515</a>                 }
<a name=L516 href="source/dev/uart/uart_dev_z8530.c#L516">516</a>                 if (<a href="ident?i=sig">sig</a> &amp; <a href="ident?i=SER_DRTS">SER_DRTS</a>) {
<a name=L517 href="source/dev/uart/uart_dev_z8530.c#L517">517</a>                         <a href="ident?i=SIGCHG">SIGCHG</a>(<a href="ident?i=sig">sig</a> &amp; <a href="ident?i=SER_RTS">SER_RTS</a>, <a href="ident?i=new">new</a>, <a href="ident?i=SER_RTS">SER_RTS</a>,
<a name=L518 href="source/dev/uart/uart_dev_z8530.c#L518">518</a>                             <a href="ident?i=SER_DRTS">SER_DRTS</a>);
<a name=L519 href="source/dev/uart/uart_dev_z8530.c#L519">519</a>                 }
<a name=L520 href="source/dev/uart/uart_dev_z8530.c#L520">520</a>         } while (!<a href="ident?i=atomic_cmpset_32">atomic_cmpset_32</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwsig, <a href="ident?i=old">old</a>, <a href="ident?i=new">new</a>));
<a name=L521 href="source/dev/uart/uart_dev_z8530.c#L521">521</a> 
<a name=L522 href="source/dev/uart/uart_dev_z8530.c#L522">522</a>         <a href="ident?i=mtx_lock_spin">mtx_lock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L523 href="source/dev/uart/uart_dev_z8530.c#L523">523</a>         if (<a href="ident?i=new">new</a> &amp; <a href="ident?i=SER_DTR">SER_DTR</a>)
<a name=L524 href="source/dev/uart/uart_dev_z8530.c#L524">524</a>                 z8530-&gt;tpc |= <a href="ident?i=TPC_DTR">TPC_DTR</a>;
<a name=L525 href="source/dev/uart/uart_dev_z8530.c#L525">525</a>         else
<a name=L526 href="source/dev/uart/uart_dev_z8530.c#L526">526</a>                 z8530-&gt;tpc &amp;= ~TPC_DTR;
<a name=L527 href="source/dev/uart/uart_dev_z8530.c#L527">527</a>         if (<a href="ident?i=new">new</a> &amp; <a href="ident?i=SER_RTS">SER_RTS</a>)
<a name=L528 href="source/dev/uart/uart_dev_z8530.c#L528">528</a>                 z8530-&gt;tpc |= <a href="ident?i=TPC_RTS">TPC_RTS</a>;
<a name=L529 href="source/dev/uart/uart_dev_z8530.c#L529">529</a>         else
<a name=L530 href="source/dev/uart/uart_dev_z8530.c#L530">530</a>                 z8530-&gt;tpc &amp;= ~TPC_RTS;
<a name=L531 href="source/dev/uart/uart_dev_z8530.c#L531">531</a>         <a href="ident?i=uart_setmreg">uart_setmreg</a>(bas, <a href="ident?i=WR_TPC">WR_TPC</a>, z8530-&gt;tpc);
<a name=L532 href="source/dev/uart/uart_dev_z8530.c#L532">532</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L533 href="source/dev/uart/uart_dev_z8530.c#L533">533</a>         <a href="ident?i=mtx_unlock_spin">mtx_unlock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L534 href="source/dev/uart/uart_dev_z8530.c#L534">534</a>         return (0);
<a name=L535 href="source/dev/uart/uart_dev_z8530.c#L535">535</a> }
<a name=L536 href="source/dev/uart/uart_dev_z8530.c#L536">536</a> 
<a name=L537 href="source/dev/uart/uart_dev_z8530.c#L537">537</a> static int
<a name=L538 href="source/dev/uart/uart_dev_z8530.c#L538">538</a> <a href="ident?i=z8530_bus_transmit">z8530_bus_transmit</a>(struct <a href="ident?i=uart_softc">uart_softc</a> *<a href="ident?i=sc">sc</a>)
<a name=L539 href="source/dev/uart/uart_dev_z8530.c#L539">539</a> {
<a name=L540 href="source/dev/uart/uart_dev_z8530.c#L540">540</a>         struct <a href="ident?i=z8530_softc">z8530_softc</a> *z8530 = (struct <a href="ident?i=z8530_softc">z8530_softc</a>*)<a href="ident?i=sc">sc</a>;
<a name=L541 href="source/dev/uart/uart_dev_z8530.c#L541">541</a>         struct <a href="ident?i=uart_bas">uart_bas</a> *bas;
<a name=L542 href="source/dev/uart/uart_dev_z8530.c#L542">542</a> 
<a name=L543 href="source/dev/uart/uart_dev_z8530.c#L543">543</a>         bas = &amp;<a href="ident?i=sc">sc</a>-&gt;sc_bas;
<a name=L544 href="source/dev/uart/uart_dev_z8530.c#L544">544</a>         <a href="ident?i=mtx_lock_spin">mtx_lock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L545 href="source/dev/uart/uart_dev_z8530.c#L545">545</a>         while (!(<a href="ident?i=uart_getmreg">uart_getmreg</a>(bas, <a href="ident?i=RR_BES">RR_BES</a>) &amp; <a href="ident?i=BES_TXE">BES_TXE</a>))
<a name=L546 href="source/dev/uart/uart_dev_z8530.c#L546">546</a>                 ;
<a name=L547 href="source/dev/uart/uart_dev_z8530.c#L547">547</a>         <a href="ident?i=uart_setreg">uart_setreg</a>(bas, <a href="ident?i=REG_DATA">REG_DATA</a>, <a href="ident?i=sc">sc</a>-&gt;sc_txbuf[0]);
<a name=L548 href="source/dev/uart/uart_dev_z8530.c#L548">548</a>         <a href="ident?i=uart_barrier">uart_barrier</a>(bas);
<a name=L549 href="source/dev/uart/uart_dev_z8530.c#L549">549</a>         <a href="ident?i=sc">sc</a>-&gt;sc_txbusy = 1;
<a name=L550 href="source/dev/uart/uart_dev_z8530.c#L550">550</a>         z8530-&gt;txidle = 1;      <b><i>/* Report UART_IPEND_TXIDLE again. */</i></b>
<a name=L551 href="source/dev/uart/uart_dev_z8530.c#L551">551</a>         <a href="ident?i=mtx_unlock_spin">mtx_unlock_spin</a>(&amp;<a href="ident?i=sc">sc</a>-&gt;sc_hwmtx);
<a name=L552 href="source/dev/uart/uart_dev_z8530.c#L552">552</a>         return (0);
<a name=L553 href="source/dev/uart/uart_dev_z8530.c#L553">553</a> }
<a name=L554 href="source/dev/uart/uart_dev_z8530.c#L554">554</a> </pre><hr>
<div align=center>
   ~ <b>[</b>&nbsp;<b><i>source navigation</i></b>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="diff/dev/uart/uart_dev_z8530.c">diff markup</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="ident">identifier search</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="search">freetext search</a>&nbsp;<b>]</b> ~ <b>[</b>&nbsp;<a href="find">file search</a>&nbsp;<b>]</b> ~
</div>

<hr>
This page was automatically generated by the 
<a href="http:blurb.html">LXR engine</a>.
<br>
Visit the <a href="http://lxr.linux.no/">LXR main site</a> for more
information.
</html>
