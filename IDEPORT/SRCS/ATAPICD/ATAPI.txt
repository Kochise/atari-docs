			ATAPI extensions thing v0.20
			=-=-=-=-=-=-=-=-=-=-=-=-=-=-


COPYRIGHT AND LICENSE:
~~~~~~~~~~~~~~~~~~~~~~
This software  is open source  and is to be  handled according to  the "artistic
license". This software is (c) 2001 Thierry Godefroy.


GENERALITIES:
~~~~~~~~~~~~~
This is the  beta (v0.20) ATAPI extensions  thing. Below is some info  on how it
works, what it already does, and  what specifications will be implemented in the
future.


CONFIGURATION AND INSTALLATION:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The ATAPI  thing installs itself when  loaded (with LRESPR), it  may also unlink
itself cleanly  from memory and link  back itself as well  (use ATAPI_UNLINK and
ATAPI_LINK IOT to  do so). Each time a  new version of the thing  is loaded, any
old version  is automatically unlinked  by the new version  initialization code,
provided the old thing is not still "in use" (e.g. by the CDROM driver).

There are  two branches of  the ATAPI  thing: one for  the Q40/Q60, and  one for
QUBIDE (v1.xx, v2.xx and the future QUBIDE II). The QUBIDE version works ONLY if
you  got a  Gold Card  or  a Super  Gold Card  (support  for Gold  Fire will  be
implemented in  due time,  i.e. when the  Gold Fire will  be available  !). Both
Q40/Q60 and QUBIDE versions work under SMSQ/E ONLY (no support planned for QDOS,
ARGOS, Minerva, SMS2, SMSQ).

The QUBIDE  version needs to be  configured for the  system it will run  on: you
have to use  (menu)config so to specify  the IDE registers base  address on your
system. This address is the QUBIDE ROM  address (as shown into the QUBIDE manual
and set  with J1 to J5  jumpers) + $3F00 (+  $400000 for addresses at  $C0000 or
higher with the Super Gold Card).
E.g.: 

- QUBIDE ROM at $C000         ==> registers base at $C000+$3F00=$FF00
- QUBIDE ROM at $C0000 on GC  ==> registers base at $C0000+$3F00=$C3F00
- QUBIDE ROM at $FC000 on SGC ==> registers base at $FC000+$3F00+$400000=$4FFF00

BEWARE: the configuration post-processing routine does not check for the address
validity (no  check made  on valid  hexadecimal digits), so  don't try  to enter
random characters "just to  see" how it will react... this would  just set a bad
address !


ATAPI DRIVES SUPPORT:
~~~~~~~~~~~~~~~~~~~~~
The usable drives are numbered as follow:
 - drive 0 is the master drive on the first IDE controller;
 - drive 1 is the slave drive on the first IDE controller;
 .../...
 - drive 6 is the master drive on the fourth IDE controller;
 - drive 7 is the slave drive on the fourth IDE controller.

NOTE: there is currently  support for 1 IDE master/slave pair  on QUBIDE (v1 and
v2) but  the QUBIDE ATAPI thing  does support up  to four pairs (QUBIDE  II will
support up to three...). On current QUBIDE versions, drives 2 to 7 are therefore
duplicated images of drives 0 and 1.


ATAPI EXTENSION THING ROUTINES:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 'IDEN':  IDENtify  device routine  (performed before  issuing the  first ATAPI
  command on a given drive, so to ensure it is actually an ATAPI drive).

  Input parameters  : D1.B = drive number.
                      A2.L = thing linkage block address.
  Output parameters : D0.L = error code.
                      D1.L = MSW: general configuration, LSW: capabilities.
  Modified registers: D0, D1.

  NOTE: this routine MUST be called in user mode only !


- 'RSET': Drive ATAPI software reset routine:

  Input parameters  : D1.B = drive number.
                      A2.L = thing linkage block address.
  Output parameters : D0.L = error code.
  Modified registers: D0.

  NOTE: this routine MUST be called in user mode only !


- 'FEAT': set/clear drive FEATures:

  Input parameters  : D1.B = drive number.
                      D3.W = bit 0-6: feature number, bit 7: 1=set, 0=clear.
                             If bit 0-7=$03 then bit 8-15=transfer mode.
                      A2.L = thing linkage block address.
  Output parameters : D0.L = error code.
  Modified registers: D0.

  NOTE: this routine MUST be called in user mode only !


- 'SLEP': order the drive to enter SLEeP mode:

  Input parameters  : D1.B = drive number.
                      A2.L = thing linkage block address.
  Output parameters : D0.L = error code.
  Modified registers: D0.

  NOTE: this routine MUST be called in user mode only !


- 'STBY': order the drive to enter STandBY mode:

  Input parameters  : D1.B = drive number.
                      A2.L = thing linkage block address.
  Output parameters : D0.L = error code.
  Modified registers: D0.

  NOTE: this routine MUST be called in user mode only !


- 'ATPK': Allocate Transient PacKet routine:

  Input parameters  :  A6.L = system variables address.
  Output parameters :  A0.L = transient packet address.
  Modified registers:  D0, A0.

  NOTE: this routine MUST be called in supervisor mode only.


- 'ANPK': Allocate "Normal" PacKet routine:

  Input parameters  :  none.
  Output parameters :  D0.L = error code.
                       A0.L = base address of packet header.
  Modified registers:  D0.

  NOTE: This routine MUST be called in user mode only.


- 'QPKT': Queue PacKeT routine:

  Input parameters  :  D1.B = IDE drive number (0 to 7).
                       A0.L = packet header address.
                       A2.L = thing linkage block address.
  Output parameters :  none.
  Modified registers:  D0.

  NOTE: this routine may be called from both user or supervisor mode.


- 'UQPK': UnQueue PacKet routine:

  Input parameters  :  D1.B = 1 for forced dequeueing.
                       A0.L = packet header address.
                       A2.L = thing linkage block address.
  Output parameters :  D0.L = error code (0=OK, -7=not found, -9=in use).
  Modified registers:  D0, D1, D2, A1.

  NOTE: this routine may be called from both user or supervisor mode.

  "Forced  de-queuing" is  there for  future overlapped  ATAPI command  protocol
  support (at  the time being the  ATAPI commands are performed  "atomically" so
  there is  no need for  forcing the  de-queuing of a  command sent but  not yet
  completed...).


- 'ZPKT': Zero PacKeT bloc routine:

  Input parameters  :  A0.L = pointer on packet.
                       A2.L = thing linkage block address.
  Output parameters :  none.
  Modified registers:  none.


- 'WPCC': Wait for Packet Command Completion routine.

  Input parameters  :  A0.L = packet header base address.
  Output parameters :  D0.L = error code.
  Modified registers:  D0.

  NOTE: this  routine may  be called both  in user or  supervisor mode.  In user
        mode, it  suspends the  calling job  until the  ATAPI packet  command is
        completed, while,  in supervisor  mode, it  returns immediately  (with a
        "not complete" error code if the ATAPI command is not completed).


- 'DSNS': Decode SeNSe data routine:

  Input parameters  :  A0.L = pointer on REQUEST SENSE returned data
                       A2.L = thing linkage block address.
  Output parameters :  D0.L = error code (bit 31 set and ptr on error message).
  Modified registers:  D0.


- 'RUNQ': RUN Queue routine (forces a run through the scheduler loop routine for
          a given drive).

  Input parameters  : D1.B = drive number.
                      A2.L = thing linkage block address.
                      A6.L = pointer on system variables base.
  Output parameters : D0.L = error code (always 0, never fails).
  Modified registers: D0.

  NOTE: this routine MUST be called in supervisor mode only.


SBASIC PROCEDURES AND FUNCTIONS:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ATAPI_LINK and ATAPI_UNLINK taken appart, most of the ATAPI thing extensions got
a SBASIC PROCedure/FuNction call equivalent:

ATAPI_IDENT     (FN),   syntax: DriveFlags=ATAPI_IDENT(Drive_number)
ATAPI_RESET     (PROC), syntax: ATAPI_RESET Drive_number
ATAPI_SLEEP     (PROC), syntax: ATAPI_SLEEP Drive_number
ATAPI_STANDBY   (PROC), syntax: ATAPI_STANDBY Drive_number
ATAPI_FEATURE   (PROC), syntax: ATAPY_FEATURE Drive_number,Feature
ATAPI_ALLOCPKT  (FN),   syntax: Packet_address=ATAPI_ALLOCPKT
ATAPI_FREEPKT   (PROC), syntax: ATAPI_FREEPKT Packet_address
ATAPI_QUEUE     (PROC), syntax: ATAPI_QUEUE Packet_address
ATAPI_UNQUEUE   (PROC), syntax: ATAPI_UNQUEUE Packet_address
ATAPI_ZEROPKT   (PROC), syntax: ATAPI_ZEROPKT Packet_address
ATAPI_SENSE     (FN),   syntax: Error=ATAPI_SENSE(Sense_data_address)
ATAPI_WAIT      (FN),   syntax: Error=ATAPI_WAIT(Packet_address)

Note  that  ATAPI_FREEPKT  is  SBASIC  specific (there  is  no  extension  thing
equivalent).


ATAPI PACKETS:
~~~~~~~~~~~~~~
The "ATAPI" thing takes care for processing  ATAPI packets so that they are sent
to the proper device, in the proper order, and without conflicts between ATA and
ATAPI devices.
The only thing you have to do is to setup a packet and packet header and to link
it into  the packet queue using  the QPKT extension. Then,  check for completion
with WPCC and take proper measures on completion (test for errors, etc).

Each  ATAPI packet  must be  held in  a block  starting with  a header  (see the
ATAPI_inc file for header fields) and followed by 18 bytes of data: the first 12
(or 16  with future ATAPI  drives) data bytes are  the ATAPI packet  itself, the
remaining 6  (or 2) bytes are  only used if  the packet command failed:  in this
case, the  ATAPI thing triggers automatically  a "REQUEST SENSE" command  to the
drive and puts the  18 bytes returned by "REQUEST SENSE" in  place of the packet
data (so to diagnoze the error). The ATAPI header + data block is 48 bytes long.

While normal packet deallocation is  the responsibility of the calling software,
the ATAPI  thing takes care  of deallocating automatically transient  packets on
completion.

A post-processing routine facility for packets is implemented as well.

An extensive error  reporting routine has been implemented and  will be vectored
into the ATAPI thing.

Because of current bad behaviour of the  SMSQ/E built-in ATA IDE driver, I could
not  implement the  ATAPI packet  driver so  that the  system does  not "freeze"
waiting for the CD-ROM drive to spin  up... The "overlap" ATAPI spec would allow
to overcome this though, and I will implement  it in the future (for now, I have
no overlap capable drive attached to  my Q60, so implementing this feature would
be  difficult). Another  hope resides  in TT  (if he  could change  sligthly his
device driver,  then the compatibility  would be  restored and even  non overlap
capable drive would not freeze the system anymore)...


VERSION NUMBERING:
~~~~~~~~~~~~~~~~~~
v0.00        : version number for all pre-alpha releases.
v0.0x (x > 0): version numbers for alpha releases.
v0.xy (x > 0): version numbers for beta releases ("x" is the release number, "y"
               is the bugfix number).
v1.xy        : version numbers for "final" releases  ("x" is the release number,
               "y" is the bugfix number).


FUTURE IMPLEMENTATIONS:
~~~~~~~~~~~~~~~~~~~~~~~
The 1.00 release of the  ATAPI extension thing will support the ATAPI overlapped
command protocol.

A C68 library will be written by me.


Last updated on 20/07/2001.                                    Thierry Godefroy.
