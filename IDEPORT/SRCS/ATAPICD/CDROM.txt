                   CDROM driver and extensions thing v0.06
                   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


COPYRIGHT AND LICENSE:
~~~~~~~~~~~~~~~~~~~~~~
This software  is open source  and is to be  handled according to  the "artistic
license". This software is (c) 2001 Thierry Godefroy.


GENERALITIES:
~~~~~~~~~~~~~
This is  the alpha (v0.06) CD-ROM  device driver. Below  is some info on  how it
works, what it already does, and  what specifications will be implemented in the
future.


INSTALLATION:
~~~~~~~~~~~~~
The driver installs itself  as a thing (an extension thing  to be precise): this
allows to find easily the linkage block address of the device driver (it follows
immediately the  thing definition block) and  to use thing extensions  so to set
and read the parameters in this linkage block.
Also, it may unlink itself cleanly from memory and link back itself as well (use
CDROM_UNLINK and CDROM_LINK IOT to do so).  Note that each time you want to load
a new version of  the device driver over an already loaded one,  you do not need
any  more  to  unlink  the  old   version  (with  CDROM_UNLINK),  this  is  done
automatically by the new version initialization code.

A big  change occured between  0.04 and  0.05 aplha-releases: the  CD-ROM device
driver was split into two different things:

- the  first  one  is the  "ATAPI"  extensions thing  which  is responsible  for
  handling all  the hardware  related ATA and  ATAPI protocols  (these protocols
  therefore disappeared from the previous "CDROM" thing).

- the  second one  is the  new "CDROM"  thing (corresponding  to the  CDR device
  driver  and  CDROM   extensions  thing,  but  without   the  hardware  related
  protocols which are now the responsibility of the "ATAPI" thing).

IOT  use the  CD-ROM device  driver,  you must  therefore load  two things:  the
"ATAPI" thing is  to be loaded first,  then the "CDROM" thing. Note  that if you
want to  upgrade the ATAPI  thing while the CDROM  thing is already  loaded, you
must first unlink the CDROM thing, example:

CDROM_UNLINK                    unlink the "CDROM" thing.
LRESPR ATAPI_bin                load the new "ATAPI" thing.
CDROM_LINK                      link back the "CDROM" thing.

This is  because the "CDROM"  thing uses the "ATAPI"  thing and failing  to free
the old ATAPI thing would prevent any removal ("in use" error is reported).


WHAT IS WORKING CURRENTLY ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~
As an  ALPHA software,  MANY things  are still left  "to do".  Nevertheless, the
driver  may be  of some  use in  its current  state. Here  is what  is currently
implemented:

- CD-ROM device identification. The CDR_INFO$ function may be  used to check for
  an ATAPI CD-ROM drive from SBASIC. It takes an optional drive number parameter
  (the default drive  number being the one corresponding to  the first succesful
  CDR_DRIVE command) and returns a string  (the CD-ROM maker and model names) or
  an error (if not a CD-ROM).

- Device driver parameters adjustements (CDR_DRIVE and CDR_USE, see below).

- Direct  sector access OPEN calls:  "*dNd" is recognized as  a special filename
  where "N" is a  digit (2, 4 or 8) representing  the "density" (apparent sector
  size, i.e.  respectively, 512, 1024 or  2048 bytes sectors). In  fact all data
  CD-ROMs use 2048 bytes sectors, but the choice is left to open a direct access
  to  smaller pseudo-sectors  so that  backward compatibilty  with old  software
  (using  "*d2d" special  files  for 512  bytes sector  access)  is ensured.  Of
  course, for  maximal performances,  "*d8d" should  be used  whenever possible.
  Example of use: OPEN #3,"cdr1_*d8d"
  Note  that currently  only  OPEN  and OPEN_IN  calls  are supported  (OPEN_DIR
  reports a  not implemented  error and OPEN_NEW/OPEN_OVER  are irrelevant  to a
  write only device and report... "write only").

  EXPERIMENTAL OPEN  to a QLWA  image (i.e. a QXL.WIN  file burnt directly  on a
  CD-R). Use  the following special  filename: "*QWA" (case insensitive).  It is
  possible to use such  "QWA CD-Rs" with the CDROM device  driver and qxltool by
  issuing SENTENV  "QXL_FILE=cdrN_*QWA" before executing "qxltool".  BEWARE, the
  same warning as above applies (quick  and dirty, no read error corrections, no
  caching scheme implememted) !

- CLOSE call (of course !).

- IOB.FMUL  call (fetch multiple  bytes), which entitles to use the TK  II "GET"
  SBASIC procedure IOT  retreive data from a direct sector  access channel (e.g.
  GET #3,A$)

- IOF.POSA and IOF.POSR calls (file  pointer positionning), which entitle to use
  the position parameter  in "GET" TK II procedure (e.g.  GET #3\2E8,A$) and the
  "FPOS" function.

- IOB.TEST (used  by "EOF" function) is implemented. But  note that because OPEN
  is only  partially implemented,  the "end  of file"  (CD-ROM size)  taken into
  account is 700 Mb (whatever is the actual CD-ROM size)...

- IOB.FBYT and  IOB.FLIN (INKEY$ and INPUT) are implemented  (remember to use an
  infinite timeout parameter for INKEY$ though...).

- IOF.LOAD  is implemented (but  LBYTES can't be  used because IOF.HEADR  is not
  implemented).

- CD-ROM drive door locking/unlocking  (it also locks/unlocks automatically with
  OPEN and CLOSE calls).

- CD-ROM drive disk loading/ejection.

- CD-ROM/RW speed setting.

- CD AUDIO playing, pausing, resuming, stopping.

The following CD_*  SBASIC commands accept a parameter (the  drive number from 0
to 7, if no parameter is passed the default is the drive number corresponding to
the first successful CDR_DRIVE call):
          CD_PLAY             CD_STOP
          CD_PAUSE            CD_RESUME
          CD_LOAD             CD_EJECT
          CD_LOCK             CD_UNLOCK
          CD_SPEED

Note  that  CD_PLAY and  CD_SPEED  need  more  than  just the  (optional)  drive
parameter:

- CD_PLAY needs for the starting and ending minutes/seconds. The syntax is:
  CD_PLAY [Drive,]Start_minute,Start_second,End_minute,End_second

- CD_SPEED needs for  the reading and writing speeds (writing  speed should be 0
  for CD-ROM drives as it is only for use with CD recorders). The syntax is:
  CD_SPEED [Drive,]Reading_speed,Writing_speed
  Note  that the  speeds are  "factors" (1,  2, 4,  8, ...,  N corresponding  to
  N*150 Kb/s).  A negative  speed (e.g. -1)  will order the  drive to  adopt its
  maximum speed.

When a command fails, it reports a CD-ROM specific error message. This may still
happen if  you don't  let enough time  to the  CD-ROM drive to  read the  CD TOC
(table  of  content) before  issuing  a  command (this  will  have  to be  cured
later...).

The usable drives are numbered as follow:
- drive 0 is the master drive on the first IDE controller;
- drive 1 is the slave drive on the first IDE controller;
.../...
- drive 6 is the master drive on the fourth IDE controller;
- drive 7 is the slave drive on the fourth IDE controller.

The CD-ROM device driver  name is "CDR" (device cdr1_ to cdr8_  may be used) and
may  be changed  with CDR_USE.  Its syntax  is: CDR_USE  dev (or  CDR_USE "dev")
where "dev" is  the new device name to be used for the CD-ROM devices.

You MUST affect a given drive  and session (for multi-session CD-Rs, the session
parameter is  currently ignored)  to a  given device  by using  CDR_DRIVE BEFORE
using this device. The syntax for CDR_DRIVE is:
CDR_DRIVE device_number,drive_number,session_number
E.g. to affect cdr2_ to the first session  of a CD-ROM in the slave drive on the
second IDE controller (drive nº 3), you have to type: CDR_DRIVE 2,3,0
Failing to affect a drive to a device before attempting an OPEN call on it, will
make OPEN to report "not found".

The implemented thing extensions are (see the sources to learn how to use them):

- PLAY,  PAUS, RESU,  STOP, LOCK,  ULCK, LOAD, EJCT,  SPED (i.e.  the extensions
  called by  the CD_* SBASIC  commands, they get  the drive number  parameter in
  D1 and, for PLAY and SPED, an additionnal parameter in D3).
- USE and DRIV : the extensions used by CDR_USE and CDR_DRIV SBASIC commands.
- INFO : returns  an information block about a given drive  (drive number in D1,
  block address returned into A0).

Note, that the CD-ROM device driver  uses the channel headers spare bytes (those
bytes  after the  filename) as  packet header+packet  storage for  I/O routines.
OTOH, the generic  CD-ROM commands (those that are not  related to device driver
I/O) use a dynamically allocated packet storage area.


VERSION NUMBERING:
~~~~~~~~~~~~~~~~~~
v0.00        : version number for all pre-alpha releases.
v0.0x (x > 0): version numbers for alpha releases.
v0.xy (x > 0): version numbers for beta releases ("x" is the release number, "y"
               is the bugfix number).
v1.xy        : version numbers for "final" releases  ("x" is the release number,
               "y" is the bugfix number).


FUTURE IMPLEMENTATIONS:
~~~~~~~~~~~~~~~~~~~~~~~
The 1.00 release  of the CDROM device  driver will only allow  for direct sector
access to CD-Rs, access  to a QLWA/QWA CD-R (viewed as a  file), and perhaps for
access to a QXL.WIN file on the root directory of an ISO9660 CD-R.

But the CDROM  device driver will also  allow for linking new  filesystems to it
(e.g.  ISO9660,  Joliet,  RockRidge,  etc...).  The related  stuff  is  not  yet
implemented but will be ready for the 1.00 release.

You will find  references to "long filenames" into the  device driver sources: I
will implement  another "thing" that  will allow for  such long filenames  to be
used into any new directory device driver. 


Last updated on 20/07/2001.                                    Thierry Godefroy.
