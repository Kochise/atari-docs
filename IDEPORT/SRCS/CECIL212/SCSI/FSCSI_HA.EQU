;***************************************************************************
;    CECILE Device Driver
;    Copyright (C) 1999-2006  David Godec  (david.godec@online.fr)
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program; if not, write to the Free Software
;    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
;
;***************************************************************************

		****************
		
		; NOTEs:
		; ------
		; 1)
		; Les appelations concernant le NCR5380 et
		; ses registres sont conformes au DATABOOK
		; r‚f‚renc‚ ZILOG DC8316-00 bien que
		; parfois abr‚g‚s par souci de clart‚ ...
		; 2)
		; Les structures,types et codes utilis‚s pour
		; le SCSI-Manager sont tels que d‚crits dans
		; "Inside Macintosh" / "Device Drivers"
		; ( scsi-manager / chapter 3 )
		
		
		****************
		
		; registres du NCR5380 (f030)
		
NcrScsiData	=	$88+$00
NcrInitiatorCommand	=	$88+$01
NcrMode		=	$88+$02
NcrTargetCommand	=	$88+$03
NcrBusStatus	=	$88+$04
NcrSelectEnable	=	$88+$04
NcrBusStatus2	=	$88+$05
NcrStartDmaSend	=	$88+$05
NcrStartDmaTR	=	$88+$06
NcrStartDmaIR	=	$88+$07
NcrResetInterrupt	=	$88+$07
		
		
		; fonctionnalit‚ des bits du 5380
		
		; 1) (I)nitiator(C)ommand(R)egister

ICR_DATA		= %00000001	; latche le registre data sur le bus
ICR_ATN		= %00000010	; valide la ligne /ATN (attention)
ICR_SEL		= %00000100	; valide la ligne /SEL (select)
ICR_BSY		= %00001000	; valide la ligne /BSY (busy)
ICR_ACK		= %00010000	; valide la ligne /ACK (acknowledge)
ICR_LOST		= %00100000	; t‚moin d'arbitrage perdu
ICR_AIP		= %01000000	; t‚moin d'arbitrage en cours
ICR_RST		= %10000000	; valide la ligne /RST (reset)

		; 2) (M)ode(R)egister

MR_ARB		= %00000001	; mode ARBitration
MR_DMA		= %00000010	; mode DMA
MR_MBSY		= %00000100	; monitore la ligne /BSY
MR_EEOP		= %00001000	; valide les IT "fin de process"
MR_EPI		= %00010000	; valide les IT "erreur parit‚"
MR_EPC		= %00100000	; valide le controle de parit‚
MR_TMODE		= %01000000	; mode "cible"

		; 3) (T)arget (C)ommand (R)egister
		
TCR_IO		= %00000001	; ligne I//O (mode cible)
TCR_CD		= %00000010	; ligne C//D (mode cible)
TCR_MSG		= %00000100	; ligne /MSG (mode cible)
TCR_REQ		= %00001000	; ligne /REQ (mode cible)
TCR_LBS		= %10000000	; t‚moin dernier octet envoy‚
		
		; 4) (C)urrent (B)us (S)tatus (R)egister
		
CBSR_DBP		= %00000001	; bit de parit‚ du bus
CBSR_SEL		= %00000010	; ‚tat ligne /SEL (selection)
CBSR_IO		= %00000100	; ‚tat ligne I//O
CBSR_CD		= %00001000	; ‚tat ligne C//D
CBSR_MSG		= %00010000	; ‚tat ligne /MSG
CBSR_REQ		= %00100000	; ‚tat ligne /REQ (request)
CBSR_BSY		= %01000000	; ‚tat ligne /BSY (busy)
CBSR_RST		= %10000000	; ‚tat ligne /RST (reset)
		
		; 5) (B)us (S)tatus (R)egister
		
BSR_ACK		= %00000001	; ‚tat ligne /ACK (acknowledge)
BSR_ATN		= %00000010	; ‚tat ligne /ATN (attention)
BSR_BSYERR	= %00000100	; t‚moin de d‚faut de ligne \BSY
BSR_PMATCH	= %00001000	; t‚moin d'ad‚quation de phase
BSR_IRQA		= %00010000	; t‚moin de requete d'IT active
BSR_PERR		= %00100000	; t‚moin d'erreur de parit‚
BSR_DMARQ		= %01000000	; t‚moin de requete DMA
BSR_EODMA		= %10000000	; bit de fin de DMA
		
		
		****************
