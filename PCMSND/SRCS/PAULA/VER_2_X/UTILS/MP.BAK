/*
 * Mini-Interface: MP.PRG
 * ----------------------
 * -> Paula Access from command shells:
 * Gemini - MUPFEL
 * Desktop - install application (!)
 * MultiTOS - MiNTShell
 *
 * !! Achtung: bei MultiTOS darauf achten, daû MP's Speicher als
 * !! 'readable' deklariert wird (shared memory!)
 */

#include <stdio.h>
#include <aes.h>
#include <tos.h>
#include <string.h>
#include <stdlib.h>


/* VA_START: Accessory wird aktiviert. Word 3 + 4 enthalten einen
 * Pointer auf eine Kommandozeile, der auch NULL sein kann.
 * In der Kommandozeile stehen Pfade oder Dateinamen.
 */
#define VA_START			0x4711

/* MP_START: identisch mit VA_START, aber:
 * 1. andere Nummer
 * 2. nachdem Paula die Kommandozeile eingelesen hat, kommt eine
 *    Antwort-Message zurÅck (MP_ACK)
 */
#define MP_ACK			0x4800		/* return message: SUCCESSFUL! */
#define MP_NAK			0x4801		/* return message: no success */
#define MP_START		0x4802		/* start the given files */
#define MP_STOP			0x4803		/* stop player & release files */

/* MP_SHUTDOWN:	stop player & close win & release MOD */
#define MP_SHUTDOWN		0x4804		/* total shut down */


int		gl_apid=-1;
int 	msgbuf[8];
char	*pcmd, extend[256];



int send_paula_message(int rx_id, int msg, int *mbuf)
{
	int		ebuf[8];
	int		evnt, d;
	
	mbuf[0] = msg;
	mbuf[1] = gl_apid;
	mbuf[2] = 0;
	appl_write(rx_id, 16, mbuf);		/* send action */

	evnt = evnt_multi(
			MU_MESAG|MU_TIMER,0,0,0,		0,0,0,0,
			0,0,0,0,						0,0,ebuf,5000,
			0,&d,&d,&d,						&d,&d,&d );

	if (evnt & MU_MESAG)
	{
		if (ebuf[1]==rx_id && (ebuf[0]==MP_ACK || ebuf[0]==MP_NAK))
			return 0;			/* OK */
		else return -1;			/* error! */
	}
	return -1;					/* timeout?! */
}



int main(int argc, char *argv[])
{
	int 	i, paula_id;
	char	*tmp;
	
	gl_apid=appl_init();				/* say hello to GEM */
	if (gl_apid<0) return(0);
	
	paula_id=appl_find("PAULA   ");		/* search for PAULA */
	if (paula_id<0) return(0);
	
	if (argc>1)					/* do we have a commandline? */
	{
		if (argc==2 && stricmp(argv[1],"STOP")==0)
				send_paula_message(paula_id, MP_STOP, msgbuf);
		else if (argc==2 && stricmp(argv[1],"KILL")==0)
				send_paula_message(paula_id, MP_SHUTDOWN, msgbuf);
		else
		{
			for(pcmd="\0", i=1; i<argc; i++)
			{
				strcpy(extend,argv[i]);
				if (shel_find(extend))
				{
					tmp=malloc(strlen(pcmd)+(strlen(extend)+1L));
					if (tmp!=NULL)
					{
						strcpy(tmp, pcmd);
						if (i>1) strcat(tmp, ";");
						strcat(tmp, extend);
						free(pcmd);
						pcmd=tmp; tmp=NULL;
					};
				};
			};
			*(char **)&msgbuf[3] = pcmd;
			msgbuf[6]=1;
			msgbuf[7]=0;
			send_paula_message(paula_id, MP_START, msgbuf);
			free(pcmd);
		};
	}
	appl_exit();
	return(0);
}


/* eof. */
