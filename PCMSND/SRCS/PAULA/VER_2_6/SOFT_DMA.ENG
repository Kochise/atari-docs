SOFT_DMA
========

    PAULA for ST!


The Soft-DMA-Sound driver installs a cookie 'SSND' whose data field is 
a pointer to the following:
--------------------------------------------------------------------

    typedef struct {
        long            magic;          /* 'CLPF'   :-) */

        /* Functions called by Paula: */
        void    (*SetAudioFrame)(int *data, int length, int range);
        void    (*Init_SDMA)(int *data, int size, int range, int sfreq);
        void    (*Exit_SDMA)(void);
        int     (*GetCPULoad)(void);    /* return cpu load */

        /* R-O vars: what sample frequencies are available. Paula has 
           to adapt to these frequencies */
        unsigned int    samplefreq0,    /* unused... */
                        samplefreq1,    /* sfreq for index 1*/
                        samplefreq2,    /* middle button */
                        samplefreq3;	/* lower button */

        /* R/W vars: Paula writes a ptr to the sound synthesizer 
        routine in that location. */
        void    (*PaulaHook)(void);     /* call this after every bufferplay */
        int     boost;                  /* 1 = boost button enabled. */

        /* driver info: Labelling text for the samplefrequency buttons 
        in Paula. */
        char    *sfreqtxt[4];

    } InfoBlock;



in ASM:
    dc.l    'CLPF'          ; magic
    dc.l    SetAudioFrame
    dc.l    Init_SDMA
    dc.l    Exit_SDMA
    dc.l    GetCPULoad

    dc.w    sf0,sf1,sf2,sf3

PaulaHook:
    dc.l    0               ;Paula overwrites this.
Boost:
    dc.w    0               ;idem, but is updated before each 
                            ;generated frame.

Samplefreq_textptrs:
    dc.l    0,0,0,0





How to use this:

1. Petra installs the SSND cookie.

2. Paula looks for the _SND cookie - if there is no STE compatible 
   DMA sound, Paula will then look for the SSND (SoftSouND) cookie. If 
   this cookie is present, the following happens:

3. Paula signals its presence to Petra by writing a pointer into the 
   location 'PaulaHook'. This is a pointer to a pseudo interrupt 
   routine which has to be called by Petra every time a frame has 
   been played completely, exactly as it is the case with the DMA sound 
   hardware.
   Paula also reads the values for the possible sample frequencies from 
   Petra's interface structure. By using that feature, you can use 
   whatever sample freuency you like. The text used to label the 
   three buttons is also taken from the struture and can be 
   anything that fits into Paula's window; e.g. Low, Medium, High; or 
   the correct frequency indication like 12288 Hz.

4. When Paula likes to play something, then it first calls the 
   function Init_SDMA to which Petra has left a pointer in the 
   interface structure. Upon that Init_SDMA call Petra is informed 
   about what sample frequency is to be used. Moreover it receives 
   the address of a 'pseudo' frame (which only contains zero bytes - in 
   order to have a 20 ms frame with no sound at all). For this dummy 
   call the data width is given as 0 bits.

5. Petra has to cope with the interrupts, and because of the double 
   buffering technique this works like this:

   Petra plays the current audio frame. When this one is finished, it 
   immediately continues with the next, already programmed frame. As 
   soon as Petra's real irq routine has started the next frame, it has 
   to call Paula's 'PaulaHook' function. By doing this, Paula 
   calculates the next frame. After this, before returning to the 
   caller, Paula calls 'SetAudioFrame', a function in Petra. This is to 
   set the pointer to the next audio frame... but be careful, this can 
   change from frame to frame! Also the other parameters like frame 
   length, operand width (0,10 or 16 bit) can change on the fly, 
   depending on what the used does with Paula.
   In case 'SetAudioFrame' has not yet been called when the current 
   frame is has ended you can either repeat that same frame again or 
   halt the sound output until you get new data. This is the overload 
   condition...

   Be careful!!! PaulaHook is _not_ reentrant. Because this routine 
   takes a while to complete, the IRQ level in the CPU should be set 
   back to the normal level (3). The hardware interface is Petra's 
   business. When using SoftDMA, Paula does not touch any hardware 
   component.

   It is also guaranteed that the Init_SDMA and Exit_SDMA-Calls always 
   come in pairs. Paula will never generate a sequence like 'Init Init 
   Exit' or 'Init Exit Exit' - Paula has a state machine which won't 
   fail. The sequence of calls will always be:

	    Init_SDMA, n*SetAudioFrame, Exit_SDMA







routines:
---------
* The Turbo-C calling conventions apply. Scalars first go to d0-d2, 
  then onto the stack. Pointers go to a0-a1, then onto the stack. The 
  called routine may only modify d0-d2/a0-a1.

* Paula cares about the double buffering. The data delivered to 
  Petra is in the internal format used by Paula, which is always 
  signed words (-32K..32K) with a range of:
    nothing             0 bit :-)           <<<<<<
    ST Stereo Normal:   9 bit per channel
    ST Mono Normal:    10 bit               <<<<<<
    TT Stereo Normal:  15 bit p.c.
    TT Mono Normal:    16 bit
    TT Stereo Interp.: 15 bit p.c.
    TT Mono Interp.:   16 bit               <<<<<<

* In SoftDMA mode, Paula switches to mono mode and uses one of 
  the above marked modes (0/10/16 bit). The correct mode is set on 
  every SetAudioFrame call.


1. SetAudioFrame:
    Petra function, called by Paula after a frame has been 
    calculated.
    Registers:  a0   pointer to the new audio frame
                d0.w length of the audio frame in words
                d1.w range (0/10/16).


2. Init_SDMA:
    Initializes the sound system. The original routine in Paula 
    programs the interrupts and sets the sample frequency.
    Registers:  a0:  pointer to the first audio frame.
                     This is only used to launch the system, 
                     Petra can ignore that but has to make sure 
                     that the first call back is done a few msec 
                     (nominal 20 ms).
                d0.w length of the audio frame in words
                d1.w range (0/10/16).
                d2.w Samplefrequency-index (1,2 or 3 - not 0)

    This routine is always called in Supervisor mode by Paula.


3. Exit_SDMA:
    Stop the thing. In the 'original version' the current frame is 
    played to the end, but the system doesn't generate any more 
    interrupts.

    This routine is always called in Supervisor mode and may only 
    modify registers d0 and a0.


4. GetCPULoad:
    This function is called by Paula from the GEM level. This function 
    has to return the CPU load in 1/1000 (1000 = max). This function 
    may be called at any moment (User mode).

    Register:   --
    Return:     d0.w - Cpu Load an Promille.

    Note: values greater than 100 shouldn't be used, otherwise 
    the bargraph indicator in Paula just exceeds its limits.


5. Boost variable:
    Is set to 1 when the booster button is switched on in Paula. It is 
    updated before every SetAudioFrame call. Petra has to perform the 
    boost.



*****************************************************************************
* well well - lets see :-)
*****************************************************************************

