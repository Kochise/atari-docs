  Here's the file format...  No source, sorry.

Protracker 1.1B Song/Module Format:
-----------------------------------
Offset  Bytes  Description
------  -----  -----------
   0     20    Songname. Remember to put trailing null bytes at the end...

Information for sample 1-31:

Offset  Bytes  Description
------  -----  -----------
  20     22    Samplename for sample 1. Pad with null bytes.
  42      2    Samplelength for sample 1. Stored as number of words.
               Multiply by two to get real sample length in bytes.
  44      1    Lower four bits are the finetune value, stored as a signed
               four bit number. The upper four bits are not used, and
               should be set to zero.
               Value:  Finetune:
                 0        0
                 1       +1
                 2       +2
                 3       +3
                 4       +4
                 5       +5
                 6       +6
                 7       +7
                 8       -8
                 9       -7
                 A       -6
                 B       -5
                 C       -4
                 D       -3
                 E       -2
                 F       -1

  45      1    Volume for sample 1. Range is $00-$40, or 0-64 decimal.
  46      2    Repeat point for sample 1. Stored as number of words offset
               from start of sample. Multiply by two to get offset in bytes.
  48      2    Repeat Length for sample 1. Stored as number of words in
               loop. Multiply by two to get replen in bytes.

Information for the next 30 samples starts here. It's just like the info for
sample 1.

Offset  Bytes  Description
------  -----  -----------
  50     30    Sample 2...
  80     30    Sample 3...
   .
   .
   .
 890     30    Sample 30...
 920     30    Sample 31...

Offset  Bytes  Description
------  -----  -----------
 950      1    Songlength. Range is 1-128.
 951      1    Well... this little byte here is set to 127, so that old
               trackers will search through all patterns when loading.
               Noisetracker uses this byte for restart, but we don't.
 952    128    Song positions 0-127. Each hold a number from 0-63 that
               tells the tracker what pattern to play at that position.
1080      4    The four letters "M.K." - This is something Mahoney & Kaktus
               inserted when they increased the number of samples from
               15 to 31. If it's not there, the module/song uses 15 samples
               or the text has been removed to make the module harder to
               rip. Startrekker puts "FLT4" or "FLT8" there instead.

Offset  Bytes  Description
------  -----  -----------
1084    1024   Data for pattern 00.
   .
   .
   .
xxxx  Number of patterns stored is equal to the highest patternnumber
      in the song position table (at offset 952-1079).

Each note is stored as 4 bytes, and all four notes at each position in
the pattern are stored after each other.

00 -  chan1  chan2  chan3  chan4
01 -  chan1  chan2  chan3  chan4
02 -  chan1  chan2  chan3  chan4
etc.

Info for each note:

 _____byte 1_____   byte2_    _____byte 3_____   byte4_
/                \ /      \  /                \ /      \
0000          0000-00000000  0000          0000-00000000

Upper four    12 bits for    Lower four    Effect command.
bits of sam-  note period.   bits of sam-
ple number.                  ple number.

Periodtable for Tuning 0, Normal
  C-1 to B-1 : 856,808,762,720,678,640,604,570,538,508,480,453
  C-2 to B-2 : 428,404,381,360,339,320,302,285,269,254,240,226
  C-3 to B-3 : 214,202,190,180,170,160,151,143,135,127,120,113

To determine what note to show,t the source code for the cruncher/decruncher from us if you need it,
but I don't understand it; I've just ripped it from another tracker...

In a module, all the samples are stored right after the patterndata.
To determine where a sample starts and stops, you use the sampleinfo
structures in the beginning of the file (from offset 20). Take a look
at the mt_init routine in the playroutine, and you'll see just how it
is done.

< captured from ModEdit 2.00 documentation >

             Editing the effect field
             ------------------------
             The effect field consists  of  2  parts:  a  command  and  an
             argument.

             The  command  can one of 16 values: 0 1 2 3 4 5 6 7 8 9 A B C
             D E F. These commands control various  aspects  of  note  and
             song  playback.   An  effect  command  generally takes effect
             starting immediately with the note field associated with that
             effect.

             The  argument  is  one  byte  long  and  is  represented   in
             hexadecimal.   A hexadecimal byte, in case you don't know, is
             a base 16 representation of a  number  that  consists  of  an
             "upper  nybble"  and a "lower nybble", each of which may take
             on a value of 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B,  C,  D,  E,
             or  F.  Values from A - F correspond to the decimal values 10
             - 15.

             Certain commands listed below use the  2  nybbles  separately
             (e.g.  arpeggiation).  In  this  case,  the 1st nybble is one
             argument, and the 2nd nybble  is  the  2nd  argument.   Other
             commands  treat  the  2  nybbles  jointly  as  one byte (e.g.
             speed).  In  this  case,  the  decimal  equivalent   of   the
             hexidecimal  number  is  calculated by: (upper nybble * 16) +
             lower nybble.  So, for instance, an effect of  "F  1D"  would
             mean  set  the song speed ("F") to 29 (1*16 + D = 1*16 + 13 =
             29).

             Here's a list of effects and their  required  argument  byte.
             "xy"  for  the  argument  byte  means  each nybble is treated
             separately; "xx" means they are treated jointly as one byte.

             0 -- AREPEGGIATION
             Format:  0 xy

             Plays its associated note in arpeggiated fashion; that is, it
             rapidly steps the note between 3 pitch values:  the  original
             pitch  value,  the  original  pitch  value  +  "x"  number of
             halfsteps, and the original  pitch  value  +  "y"  number  of
             halfsteps.

             1 -- SLIDE UP
             Format:  1 xx

             Slides pitch up; slide speed is determined by the xx argument
             (remember, it's in hexadecimal).

             2 -- SLIDE DOWN
             Format:  2 xx

             Just like SLIDE UP except it slides the pitch down.

             3 -- SLIDE TO NOTE
             Format:  3 xx

             Similar  to  slide  except  it  slides  the pitch TOWARDS the
             pitch of the associated note field (commands  1  and  2  only
             specify  a  speed,  not  a  destination).  xx is the speed to
             slide the pitch.

             wn.  If x is specified and y
             is  0,  the  volume is slid up at speed x.  If y is specified
             and x is 0, the volume is slid down at speed y.

             B -- POSITION JUMP
             Format:  B xx

             Breaks the pattern (i.e. stops  playing  it  at  its  current
             position)  and  jumps  to  position  xx (hexadecimal!) in the
             pattern sequence table.

             C -- SET VOLUME
             Format:  C xx

             Sets  the  volume  for  its associated note unit to xx.  Note
             that it only takes effect with its associated note unit,  not
             subsequent notes.  Valid volume range is 00 - 40 (hex).

             D -- PATTERN BREAK
             Format:  D 00


             Breaks the pattern (i.e. stops  playing  it  at  its  current
             position) and goes on to the next one in the pattern sequence
             table.  The argument is meaningless.

             F -- SET SPEED
             Format:  F xx

             Sets the speed of the song; hex values 00 - 1F are valid.

